"use strict";

function loadJquery() {
  $(document).ready(function () {
    $("#toggle-sidebar").click(function () {
      $('.ui.sidebar').sidebar('toggle');
    });
  });
}
"use strict";

function loadD3() {
  console.log("hello");
  d3.json("data/document_topic_probability.json", function (x) {
    window.document_topic_probability = x;
    d3.json("data/topic_word_distribution_in_corpora.json", function (y) {
      window.word_distribution_in_corpora = y;
      d3.json("data/topic_word_probability_in_topic.json", function (z) {
        window.topic_word_probability = z;
        generateTopicVectors(); //Loads vectors in window.topicVectors

        loadVisualizations();
      });
    });
  });
}

function loadVisualizations() {}

function initPage1(topic_number) {
  renderClusterAnalysis();
  renderBarGraph(topic_number);
}

function renderClusterAnalysis() {
  var height = 400;
  var width = 600;
  var margin = 40;
  var data = [];

  for (var i = 0; i < 42; i++) {
    data.push({
      x: Math.random() * 400,
      y: Math.random() * 100,
      c: Math.round(Math.random() * 5),
      size: Math.random() * 200
    });
  }

  var labelX = 'X';
  var labelY = 'Y';
  var svg = d3.select('#cluster').append('svg').attr('class', 'chart').attr("width", width + margin + margin).attr("height", height + margin + margin).append("g").attr("transform", "translate(" + margin + "," + margin + ")");
  var x = d3.scaleLinear().domain([d3.min(data, function (d) {
    return d.x;
  }), d3.max(data, function (d) {
    return d.x;
  })]).range([0, width]);
  var y = d3.scaleLinear().domain([d3.min(data, function (d) {
    return d.y;
  }), d3.max(data, function (d) {
    return d.y;
  })]).range([height, 0]);
  var scale = d3.scaleSqrt().domain([d3.min(data, function (d) {
    return d.size;
  }), d3.max(data, function (d) {
    return d.size;
  })]).range([1, 20]);
  var opacity = d3.scaleSqrt().domain([d3.min(data, function (d) {
    return d.size;
  }), d3.max(data, function (d) {
    return d.size;
  })]).range([1, .5]);
  var xAxis = d3.axisBottom().scale(x);
  var yAxis = d3.axisLeft().scale(y);
  svg.append("g").attr("class", "y axis").call(yAxis).append("text").attr("transform", "rotate(-90)").attr("x", 20).attr("y", -margin).attr("dy", ".71em").style("text-anchor", "end").text(labelY); // x axis and label

  svg.append("g").attr("class", "x axis").attr("transform", "translate(0," + height + ")").call(xAxis).append("text").attr("x", width + 20).attr("y", margin - 10).attr("dy", ".71em").style("text-anchor", "end").text(labelX);
  svg.selectAll("circle").data(data).enter().append("g").insert("circle").attr("cx", width / 2).attr("cy", height / 2).attr("opacity", function (d) {
    return opacity(d.size);
  }).attr("r", function (d) {
    return scale(d.size);
  }).style("fill", function (d) {
    return "#1f77b4";
  }).on('mouseover', function (d, i) {
    fade(d.c, .1);
  }).on('mouseout', function (d, i) {
    fadeOut();
  }).transition().delay(function (d, i) {
    return x(d.x) - y(d.y);
  }).duration(500).attr("cx", function (d) {
    return x(d.x);
  }).attr("cy", function (d) {
    return y(d.y);
  });

  function fade(c, opacity) {
    svg.selectAll("circle").filter(function (d) {
      return d.c != c;
    }).transition().style("opacity", opacity);
  }

  function fadeOut() {
    svg.selectAll("circle").transition().style("opacity", function (d) {
      opacity(d.size);
    });
  }
}

function renderBarGraph(topic_number) {
  var topic_words = window.document_topic_probability;
  var data = window.topic_word_probability;
  var topic_distribution_in_corpa = window.word_distribution_in_corpora;
  var final_data = [];
  var data = data[topic_number][0];

  for (var i = 0; i < data.length; i++) {
    var temp = {};
    var key = Object.keys(data[i])[0];
    var val = data[i][Object.keys(data[i])[0]];
    var overall = topic_distribution_in_corpa[key];
    temp.State = key;
    temp.topic_frequency = val;
    temp.overall = overall;
    temp.total = temp.topic_frequency + temp.overall;
    final_data.push(temp);
  }

  var bb = document.querySelector('#stacked-bar').getBoundingClientRect(),
      width = bb.right - bb.left;
  var data = final_data;
  var height = data.length * 25;
  var svg = d3.select("#stacked-bar").append("svg").attr("width", width).attr("height", height),
      margin = {
    top: 20,
    right: 20,
    bottom: 30,
    left: 50
  },
      width = +svg.attr("width") - margin.left - margin.right,
      height = +svg.attr("height") - margin.top - margin.bottom,
      g = svg.append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");
  var y = d3.scaleBand() // x = d3.scaleBand()  
  .rangeRound([0, height]) // .rangeRound([0, width])
  .paddingInner(0.25).align(0.1);
  var x = d3.scaleLinear() // y = d3.scaleLinear()
  .rangeRound([0, width]); // .rangeRound([height, 0]);

  var z = d3.scaleOrdinal().range(["#C8423E", "#A1C7E0"]);
  var keys = ["topic_frequency", "overall"];
  data.sort(function (a, b) {
    return b.total - a.total;
  });
  y.domain(data.map(function (d) {
    return d.State;
  })); // x.domain...

  x.domain([0, d3.max(data, function (d) {
    return d.total;
  })]).nice(); // y.domain...

  z.domain(keys);
  g.append("g").selectAll("g").data(d3.stack().keys(keys)(data)).enter().append("g").attr("fill", function (d) {
    return z(d.key);
  }).selectAll("rect").data(function (d) {
    return d;
  }).enter().append("rect").attr("y", function (d) {
    return y(d.data.State);
  }) //.attr("x", function(d) { return x(d.data.State); })
  .attr("x", function (d) {
    return x(d[0]);
  }) //.attr("y", function(d) { return y(d[1]); })  
  .attr("width", function (d) {
    return x(d[1]) - x(d[0]);
  }) //.attr("height", function(d) { return y(d[0]) - y(d[1]); })
  .attr("height", y.bandwidth()).attr("opacity", 0.8); //.attr("width", x.bandwidth()); 

  g.append("g").attr("class", "axis").attr("transform", "translate(0,0)") //  .attr("transform", "translate(0," + height + ")")
  .call(d3.axisLeft(y)); //   .call(d3.axisBottom(x));

  g.append("g").attr("class", "axis").attr("transform", "translate(0," + height + ")") // New line
  .call(d3.axisBottom(x).ticks(null, "s")) //  .call(d3.axisLeft(y).ticks(null, "s"))
  .append("text").attr("y", 2) //     .attr("y", 2)
  .attr("x", x(x.ticks().pop()) + 0.5) //     .attr("y", y(y.ticks().pop()) + 0.5)
  .attr("dy", "0.32em"); //     .attr("dy", "0.32em")

  var legend = g.append("g").attr("font-family", "sans-serif").attr("font-size", 10).attr("text-anchor", "end").selectAll("g").data(keys.slice().reverse()).enter().append("g") //.attr("transform", function(d, i) { return "translate(0," + i * 20 + ")"; });
  .attr("transform", function (d, i) {
    return "translate(-50," + (300 + i * 20) + ")";
  });
  legend.append("rect").attr("x", width - 19).attr("width", 19).attr("height", 19).attr("fill", z);
  legend.append("text").attr("x", width - 24).attr("y", 9.5).attr("dy", "0.32em").text(function (d) {
    return d;
  });
}

function initPage2() {}

function initPage3() {
  loadParallelCoordinate();
}
"use strict";

//vectors format: Map[string(topic_id): List[float]]
function get2DVectors(vectors, successCallback) {
  var request = $.ajax({
    url: "/get2DVectors",
    method: "POST",
    data: vectors
  });
  request.done(function (response) {
    successCallback(response);
  });
  request.fail(function (jqXHR, textStatus) {
    alert("Request failed: " + textStatus);
  });
} // docs format: List[List[string(word)]]


function getWord2VecClusters(docs, successCallback) {
  var request = $.ajax({
    url: "/get2DVectors",
    method: "POST",
    data: {
      docs: docs
    }
  });
  request.done(function (response) {
    successCallback(response);
  });
  request.fail(function (jqXHR, textStatus) {
    alert("Request failed: " + textStatus);
  });
}
"use strict";

function loadParallelCoordinate() {
  var margin = {
    top: 30,
    right: 10,
    bottom: 10,
    left: 10
  },
      width = 960 - margin.left - margin.right,
      height = 500 - margin.top - margin.bottom;
  var x = d3.scale.ordinal().rangePoints([0, width], 1),
      y = {},
      dragging = {};
  var line = d3.svg.line(),
      axis = d3.svg.axis().orient("left"),
      background,
      foreground;
  var svg = d3.select("body").append("svg").attr("width", width + margin.left + margin.right).attr("height", height + margin.top + margin.bottom).append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");
  d3.csv("cars.csv", function (error, cars) {
    // Extract the list of dimensions and create a scale for each.
    x.domain(dimensions = d3.keys(cars[0]).filter(function (d) {
      return d != "name" && (y[d] = d3.scale.linear().domain(d3.extent(cars, function (p) {
        return +p[d];
      })).range([height, 0]));
    })); // Add grey background lines for context.

    background = svg.append("g").attr("class", "background").selectAll("path").data(cars).enter().append("path").attr("d", path); // Add blue foreground lines for focus.

    foreground = svg.append("g").attr("class", "foreground").selectAll("path").data(cars).enter().append("path").attr("d", path); // Add a group element for each dimension.

    var g = svg.selectAll(".dimension").data(dimensions).enter().append("g").attr("class", "dimension").attr("transform", function (d) {
      return "translate(" + x(d) + ")";
    }).call(d3.behavior.drag().origin(function (d) {
      return {
        x: x(d)
      };
    }).on("dragstart", function (d) {
      dragging[d] = x(d);
      background.attr("visibility", "hidden");
    }).on("drag", function (d) {
      dragging[d] = Math.min(width, Math.max(0, d3.event.x));
      foreground.attr("d", path);
      dimensions.sort(function (a, b) {
        return position(a) - position(b);
      });
      x.domain(dimensions);
      g.attr("transform", function (d) {
        return "translate(" + position(d) + ")";
      });
    }).on("dragend", function (d) {
      delete dragging[d];
      transition(d3.select(this)).attr("transform", "translate(" + x(d) + ")");
      transition(foreground).attr("d", path);
      background.attr("d", path).transition().delay(500).duration(0).attr("visibility", null);
    })); // Add an axis and title.

    g.append("g").attr("class", "axis").each(function (d) {
      d3.select(this).call(axis.scale(y[d]));
    }).append("text").style("text-anchor", "middle").attr("y", -9).text(function (d) {
      return d;
    }); // Add and store a brush for each axis.

    g.append("g").attr("class", "brush").each(function (d) {
      d3.select(this).call(y[d].brush = d3.svg.brush().y(y[d]).on("brushstart", brushstart).on("brush", brush));
    }).selectAll("rect").attr("x", -8).attr("width", 16);
  });

  function position(d) {
    var v = dragging[d];
    return v == null ? x(d) : v;
  }

  function transition(g) {
    return g.transition().duration(500);
  } // Returns the path for a given data point.


  function path(d) {
    return line(dimensions.map(function (p) {
      return [position(p), y[p](d[p])];
    }));
  }

  function brushstart() {
    d3.event.sourceEvent.stopPropagation();
  } // Handles a brush event, toggling the display of foreground lines.


  function brush() {
    var actives = dimensions.filter(function (p) {
      return !y[p].brush.empty();
    }),
        extents = actives.map(function (p) {
      return y[p].brush.extent();
    });
    foreground.style("display", function (d) {
      return actives.every(function (p, i) {
        return extents[i][0] <= d[p] && d[p] <= extents[i][1];
      }) ? null : "none";
    });
  }
}
"use strict";

function generateTopicVectors() {
  window.topicVectors = {};

  if (window.topic_word_probability_in_topic) {
    for (var x in window.topic_word_probability_in_topic) {
      var vector = [];

      for (var y in window.topic_word_probability_in_topic[x]) {
        vector.push(window.topic_word_probability_in_topic[x][y]);
      }

      window.topicVectors[x] = vector;
    }
  }
}

function generateParallelCoordinateData() {
  var words = window.word_distribution_in_corpora.keys();
  var topic_word_threshold = 0.3;
  window.topic_word_probability.map(function (x) {});
}
"use strict";

window.vueApp = new Vue({
  el: '#vue-app',
  data: {
    message: 'Hello user!',
    noneSelected: true,
    selectedPage: 1,
    playerDetail: {
      name: "<Player Name>"
    },
    overviewFilters: {},
    selectedMap: 1
  },
  methods: {
    selectPage: function selectPage(x) {
      this.selectedPage = x;

      if (x == 1) {
        initPage1(0);
      }

      if (x == 2) {
        initPage2();
      }

      if (x == 3) {
        initPage3();
      }
    }
  },
  mounted: function mounted() {
    console.log("Mounted");
    loadD3();
    loadJquery();
  }
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImV2ZW50cy5qcyIsIm1haW4uanMiLCJuZXR3b3JrLmpzIiwicGFyYWxsZWwtY29vcmRpbmF0ZS5qcyIsInV0aWwuanMiLCJ2dWVfbW9kZWwuanMiXSwibmFtZXMiOlsibG9hZEpxdWVyeSIsIiQiLCJkb2N1bWVudCIsInJlYWR5IiwiY2xpY2siLCJzaWRlYmFyIiwibG9hZEQzIiwiY29uc29sZSIsImxvZyIsImQzIiwianNvbiIsIngiLCJ3aW5kb3ciLCJkb2N1bWVudF90b3BpY19wcm9iYWJpbGl0eSIsInkiLCJ3b3JkX2Rpc3RyaWJ1dGlvbl9pbl9jb3Jwb3JhIiwieiIsInRvcGljX3dvcmRfcHJvYmFiaWxpdHkiLCJnZW5lcmF0ZVRvcGljVmVjdG9ycyIsImxvYWRWaXN1YWxpemF0aW9ucyIsImluaXRQYWdlMSIsInRvcGljX251bWJlciIsInJlbmRlckNsdXN0ZXJBbmFseXNpcyIsInJlbmRlckJhckdyYXBoIiwiaGVpZ2h0Iiwid2lkdGgiLCJtYXJnaW4iLCJkYXRhIiwiaSIsInB1c2giLCJNYXRoIiwicmFuZG9tIiwiYyIsInJvdW5kIiwic2l6ZSIsImxhYmVsWCIsImxhYmVsWSIsInN2ZyIsInNlbGVjdCIsImFwcGVuZCIsImF0dHIiLCJzY2FsZUxpbmVhciIsImRvbWFpbiIsIm1pbiIsImQiLCJtYXgiLCJyYW5nZSIsInNjYWxlIiwic2NhbGVTcXJ0Iiwib3BhY2l0eSIsInhBeGlzIiwiYXhpc0JvdHRvbSIsInlBeGlzIiwiYXhpc0xlZnQiLCJjYWxsIiwic3R5bGUiLCJ0ZXh0Iiwic2VsZWN0QWxsIiwiZW50ZXIiLCJpbnNlcnQiLCJvbiIsImZhZGUiLCJmYWRlT3V0IiwidHJhbnNpdGlvbiIsImRlbGF5IiwiZHVyYXRpb24iLCJmaWx0ZXIiLCJ0b3BpY193b3JkcyIsInRvcGljX2Rpc3RyaWJ1dGlvbl9pbl9jb3JwYSIsImZpbmFsX2RhdGEiLCJsZW5ndGgiLCJ0ZW1wIiwia2V5IiwiT2JqZWN0Iiwia2V5cyIsInZhbCIsIm92ZXJhbGwiLCJTdGF0ZSIsInRvcGljX2ZyZXF1ZW5jeSIsInRvdGFsIiwiYmIiLCJxdWVyeVNlbGVjdG9yIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwicmlnaHQiLCJsZWZ0IiwidG9wIiwiYm90dG9tIiwiZyIsInNjYWxlQmFuZCIsInJhbmdlUm91bmQiLCJwYWRkaW5nSW5uZXIiLCJhbGlnbiIsInNjYWxlT3JkaW5hbCIsInNvcnQiLCJhIiwiYiIsIm1hcCIsIm5pY2UiLCJzdGFjayIsImJhbmR3aWR0aCIsInRpY2tzIiwicG9wIiwibGVnZW5kIiwic2xpY2UiLCJyZXZlcnNlIiwiaW5pdFBhZ2UyIiwiaW5pdFBhZ2UzIiwibG9hZFBhcmFsbGVsQ29vcmRpbmF0ZSIsImdldDJEVmVjdG9ycyIsInZlY3RvcnMiLCJzdWNjZXNzQ2FsbGJhY2siLCJyZXF1ZXN0IiwiYWpheCIsInVybCIsIm1ldGhvZCIsImRvbmUiLCJyZXNwb25zZSIsImZhaWwiLCJqcVhIUiIsInRleHRTdGF0dXMiLCJhbGVydCIsImdldFdvcmQyVmVjQ2x1c3RlcnMiLCJkb2NzIiwib3JkaW5hbCIsInJhbmdlUG9pbnRzIiwiZHJhZ2dpbmciLCJsaW5lIiwiYXhpcyIsIm9yaWVudCIsImJhY2tncm91bmQiLCJmb3JlZ3JvdW5kIiwiY3N2IiwiZXJyb3IiLCJjYXJzIiwiZGltZW5zaW9ucyIsImxpbmVhciIsImV4dGVudCIsInAiLCJwYXRoIiwiYmVoYXZpb3IiLCJkcmFnIiwib3JpZ2luIiwiZXZlbnQiLCJwb3NpdGlvbiIsImVhY2giLCJicnVzaCIsImJydXNoc3RhcnQiLCJ2Iiwic291cmNlRXZlbnQiLCJzdG9wUHJvcGFnYXRpb24iLCJhY3RpdmVzIiwiZW1wdHkiLCJleHRlbnRzIiwiZXZlcnkiLCJ0b3BpY1ZlY3RvcnMiLCJ0b3BpY193b3JkX3Byb2JhYmlsaXR5X2luX3RvcGljIiwidmVjdG9yIiwiZ2VuZXJhdGVQYXJhbGxlbENvb3JkaW5hdGVEYXRhIiwid29yZHMiLCJ0b3BpY193b3JkX3RocmVzaG9sZCIsInZ1ZUFwcCIsIlZ1ZSIsImVsIiwibWVzc2FnZSIsIm5vbmVTZWxlY3RlZCIsInNlbGVjdGVkUGFnZSIsInBsYXllckRldGFpbCIsIm5hbWUiLCJvdmVydmlld0ZpbHRlcnMiLCJzZWxlY3RlZE1hcCIsIm1ldGhvZHMiLCJzZWxlY3RQYWdlIiwibW91bnRlZCJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxTQUFTQSxVQUFULEdBQXFCO0FBQ2pCQyxFQUFBQSxDQUFDLENBQUNDLFFBQUQsQ0FBRCxDQUFZQyxLQUFaLENBQWtCLFlBQVU7QUFDeEJGLElBQUFBLENBQUMsQ0FBQyxpQkFBRCxDQUFELENBQXFCRyxLQUFyQixDQUEyQixZQUFVO0FBQ2pDSCxNQUFBQSxDQUFDLENBQUMsYUFBRCxDQUFELENBQ0tJLE9BREwsQ0FDYSxRQURiO0FBR0gsS0FKRDtBQU1ILEdBUEQ7QUFRSDs7O0FDVEQsU0FBU0MsTUFBVCxHQUFpQjtBQUNiQyxFQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSxPQUFaO0FBQ0FDLEVBQUFBLEVBQUUsQ0FBQ0MsSUFBSCxDQUFRLHNDQUFSLEVBQWdELFVBQVNDLENBQVQsRUFBVztBQUN2REMsSUFBQUEsTUFBTSxDQUFDQywwQkFBUCxHQUFtQ0YsQ0FBbkM7QUFDQUYsSUFBQUEsRUFBRSxDQUFDQyxJQUFILENBQVEsOENBQVIsRUFBd0QsVUFBU0ksQ0FBVCxFQUFXO0FBQy9ERixNQUFBQSxNQUFNLENBQUNHLDRCQUFQLEdBQXFDRCxDQUFyQztBQUNBTCxNQUFBQSxFQUFFLENBQUNDLElBQUgsQ0FBUSwyQ0FBUixFQUFxRCxVQUFTTSxDQUFULEVBQVc7QUFDNURKLFFBQUFBLE1BQU0sQ0FBQ0ssc0JBQVAsR0FBZ0NELENBQWhDO0FBQ0FFLFFBQUFBLG9CQUFvQixHQUZ3QyxDQUVwQzs7QUFDeEJDLFFBQUFBLGtCQUFrQjtBQUVyQixPQUxEO0FBTUgsS0FSRDtBQVNILEdBWEQ7QUFZSDs7QUFFRCxTQUFTQSxrQkFBVCxHQUE2QixDQUU1Qjs7QUFFRCxTQUFTQyxTQUFULENBQW1CQyxZQUFuQixFQUFnQztBQUM5QkMsRUFB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UGY7QUFRRkMsSUFBQUEsV0FBVyxFQUFFO0FBUlgsR0FGYztBQVlwQkMsRUFBQUEsT0FBTyxFQUFFO0FBQ0xDLElBQUFBLFVBQVUsRUFBRSxvQkFBU2hLLENBQVQsRUFBVztBQUNuQixXQUFLMEosWUFBTCxHQUFvQjFKLENBQXBCOztBQUNBLFVBQUlBLENBQUMsSUFBSSxDQUFULEVBQVc7QUFDUFMsUUFBQUEsU0FBUyxDQUFDLENBQUQsQ0FBVDtBQUNIOztBQUNELFVBQUlULENBQUMsSUFBSSxDQUFULEVBQVc7QUFDUDhGLFFBQUFBLFNBQVM7QUFDWjs7QUFDRCxVQUFJOUYsQ0FBQyxJQUFJLENBQVQsRUFBVztBQUNQK0YsUUFBQUEsU0FBUztBQUNaO0FBQ0o7QUFaSSxHQVpXO0FBMEJwQmtFLEVBQUFBLE9BQU8sRUFBRSxtQkFBVTtBQUNmckssSUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksU0FBWjtBQUNBRixJQUFBQSxNQUFNO0FBQ05OLElBQUFBLFVBQVU7QUFDYjtBQTlCbUIsQ0FBUixDQUFoQiIsImZpbGUiOiJhcHAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBsb2FkSnF1ZXJ5KCl7XG4gICAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKXtcbiAgICAgICAgJChcIiN0b2dnbGUtc2lkZWJhclwiKS5jbGljayhmdW5jdGlvbigpe1xuICAgICAgICAgICAgJCgnLnVpLnNpZGViYXInKVxuICAgICAgICAgICAgICAgIC5zaWRlYmFyKCd0b2dnbGUnKVxuICAgICAgICAgICAgO1xuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgfSk7XG59XG4iLCJmdW5jdGlvbiBsb2FkRDMoKXtcbiAgICBjb25zb2xlLmxvZyhcImhlbGxvXCIpO1xuICAgIGQzLmpzb24oXCJkYXRhL2RvY3VtZW50X3RvcGljX3Byb2JhYmlsaXR5Lmpzb25cIiwgZnVuY3Rpb24oeCl7XG4gICAgICAgIHdpbmRvdy5kb2N1bWVudF90b3BpY19wcm9iYWJpbGl0eT0geDtcbiAgICAgICAgZDMuanNvbihcImRhdGEvdG9waWNfd29yZF9kaXN0cmlidXRpb25faW5fY29ycG9yYS5qc29uXCIsIGZ1bmN0aW9uKHkpe1xuICAgICAgICAgICAgd2luZG93LndvcmRfZGlzdHJpYnV0aW9uX2luX2NvcnBvcmE9IHk7XG4gICAgICAgICAgICBkMy5qc29uKFwiZGF0YS90b3BpY193b3JkX3Byb2JhYmlsaXR5X2luX3RvcGljLmpzb25cIiwgZnVuY3Rpb24oeil7XG4gICAgICAgICAgICAgICAgd2luZG93LnRvcGljX3dvcmRfcHJvYmFiaWxpdHkgPSB6O1xuICAgICAgICAgICAgICAgIGdlbmVyYXRlVG9waWNWZWN0b3JzKCk7IC8vTG9hZHMgdmVjdG9ycyBpbiB3aW5kb3cudG9waWNWZWN0b3JzXG4gICAgICAgICAgICAgICAgbG9hZFZpc3VhbGl6YXRpb25zKCk7XG5cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gbG9hZFZpc3VhbGl6YXRpb25zKCl7XG5cbn1cblxuZnVuY3Rpb24gaW5pdFBhZ2UxKHRvcGljX251bWJlcil7XG4gIHJlbmRlckNsdXN0ZXJBbmFseXNpcygpO1xuICByZW5kZXJCYXJHcmFwaCh0b3BpY19udW1iZXIpO1xufVxuXG5cbmZ1bmN0aW9uIHJlbmRlckNsdXN0ZXJBbmFseXNpcygpe1xuICB2YXIgaGVpZ2h0ID0gNDAwO1xudmFyIHdpZHRoID0gNjAwO1xudmFyIG1hcmdpbiA9IDQwO1xudmFyIGRhdGEgPVtdO1xuZm9yKHZhciBpID0gMDsgaSA8IDQyOyBpKyspIHtcbiAgZGF0YS5wdXNoKHtcbiAgICAgIHg6IE1hdGgucmFuZG9tKCkgKiA0MDAsXG4gICAgICAgIHk6IE1hdGgucmFuZG9tKCkgKiAxMDAsXG4gICAgICAgIGM6IE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSAqIDUpLFxuICAgICAgICBzaXplOiBNYXRoLnJhbmRvbSgpICogMjAwLFxuICAgICAgICB9KTtcbn1cblxudmFyIGxhYmVsWCA9ICdYJztcbnZhciBsYWJlbFkgPSAnWSc7XG52YXIgc3ZnID0gZDMuc2VsZWN0KCcjY2x1c3RlcicpXG4gICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJ3N2ZycpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdjbGFzcycsICdjaGFydCcpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgd2lkdGggKyBtYXJnaW4gKyBtYXJnaW4pXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGhlaWdodCArIG1hcmdpbiArIG1hcmdpbilcbiAgICAgICAgICAgICAgICAgICAgLmFwcGVuZChcImdcIilcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoXCIgKyBtYXJnaW4gKyBcIixcIiArIG1hcmdpbiArIFwiKVwiKTtcblxudmFyIHggPSBkMy5zY2FsZUxpbmVhcigpXG4gICAgICAgICAgICAgICAgICAgICAgLmRvbWFpbihbZDMubWluKGRhdGEsIGZ1bmN0aW9uIChkKSB7IHJldHVybiBkLng7IH0pLCBkMy5tYXgoZGF0YSwgZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQueDsgfSldKVxuICAgICAgICAgICAgICAgICAgICAgIC5yYW5nZShbMCwgd2lkdGhdKTtcblxudmFyIHkgPSBkMy5zY2FsZUxpbmVhcigpXG4gICAgICAgICAgICAgICAgICAgICAgLmRvbWFpbihbZDMubWluKGRhdGEsIGZ1bmN0aW9uIChkKSB7IHJldHVybiBkLnk7IH0pLCBkMy5tYXgoZGF0YSwgZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQueTsgfSldKVxuICAgICAgICAgICAgICAgICAgICAgIC5yYW5nZShbaGVpZ2h0LCAwXSk7XG5cbnZhciBzY2FsZSA9IGQzLnNjYWxlU3FydCgpXG4gICAgICAgICAgICAgICAgICAgICAgLmRvbWFpbihbZDMubWluKGRhdGEsIGZ1bmN0aW9uIChkKSB7IHJldHVybiBkLnNpemU7IH0pLCBkMy5tYXgoZGF0YSwgZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQuc2l6ZTsgfSldKVxuICAgICAgICAgICAgICAgICAgICAgIC5yYW5nZShbMSwgMjBdKTtcblxudmFyIG9wYWNpdHkgPSBkMy5zY2FsZVNxcnQoKVxuICAgICAgICAgICAgICAgICAgICAgIC5kb21haW4oW2QzLm1pbihkYXRhLCBmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC5zaXplOyB9KSwgZDMubWF4KGRhdGEsIGZ1bmN0aW9uIChkKSB7IHJldHVybiBkLnNpemU7IH0pXSlcbiAgICAgICAgICAgICAgICAgICAgICAucmFuZ2UoWzEsIC41XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuXG4gIHZhciB4QXhpcyA9IGQzLmF4aXNCb3R0b20oKS5zY2FsZSh4KTtcbiAgdmFyIHlBeGlzID0gZDMuYXhpc0xlZnQoKS5zY2FsZSh5KTtcblxuXG4gXG4gIHN2Zy5hcHBlbmQoXCJnXCIpXG4gICAgICAgICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwieSBheGlzXCIpXG4gICAgICAgICAgICAgICAgICAuY2FsbCh5QXhpcylcbiAgICAgICAgICAgICAgICAgIC5hcHBlbmQoXCJ0ZXh0XCIpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwicm90YXRlKC05MClcIilcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIDIwKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcInlcIiwgLW1hcmdpbilcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJkeVwiLCBcIi43MWVtXCIpXG4gICAgICAgICAgICAgICAgICAgIC5zdHlsZShcInRleHQtYW5jaG9yXCIsIFwiZW5kXCIpXG4gICAgICAgICAgICAgICAgICAgIC50ZXh0KGxhYmVsWSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHggYXhpcyBhbmQgbGFiZWxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgc3ZnLmFwcGVuZChcImdcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJ4IGF4aXNcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKDAsXCIgKyBoZWlnaHQgKyBcIilcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5jYWxsKHhBeGlzKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZChcInRleHRcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXR0cihcInhcIiwgd2lkdGggKyAyMClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXR0cihcInlcIiwgbWFyZ2luIC0gMTApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJkeVwiLCBcIi43MWVtXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnN0eWxlKFwidGV4dC1hbmNob3JcIiwgXCJlbmRcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGV4dChsYWJlbFgpO1xuIFxuICAgICAgICAgICAgICAgICAgICAgIHN2Zy5zZWxlY3RBbGwoXCJjaXJjbGVcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5kYXRhKGRhdGEpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZW50ZXIoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZChcImdcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5pbnNlcnQoXCJjaXJjbGVcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKFwiY3hcIiwgd2lkdGggLyAyKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJjeVwiLCBoZWlnaHQgLyAyKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJvcGFjaXR5XCIsIGZ1bmN0aW9uIChkKSB7IHJldHVybiBvcGFjaXR5KGQuc2l6ZSk7IH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXR0cihcInJcIiwgZnVuY3Rpb24gKGQpIHsgcmV0dXJuIHNjYWxlKGQuc2l6ZSk7IH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuc3R5bGUoXCJmaWxsXCIsIGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIiMxZjc3YjRcIjt9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLm9uKCdtb3VzZW92ZXInLCBmdW5jdGlvbiAoZCwgaSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZhZGUoZC5jLCAuMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAub24oJ21vdXNlb3V0JywgZnVuY3Rpb24gKGQsIGkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZhZGVPdXQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRyYW5zaXRpb24oKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5kZWxheShmdW5jdGlvbiAoZCwgaSkgeyByZXR1cm4geChkLngpIC0geShkLnkpOyB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5kdXJhdGlvbig1MDApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJjeFwiLCBmdW5jdGlvbiAoZCkgeyByZXR1cm4geChkLngpOyB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKFwiY3lcIiwgZnVuY3Rpb24gKGQpIHsgcmV0dXJuIHkoZC55KTsgfSk7XG5cblxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXG5cblxuICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gZmFkZShjLCBvcGFjaXR5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdmcuc2VsZWN0QWxsKFwiY2lyY2xlXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZC5jICE9IGM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRyYW5zaXRpb24oKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnN0eWxlKFwib3BhY2l0eVwiLCBvcGFjaXR5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGZhZGVPdXQoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdmcuc2VsZWN0QWxsKFwiY2lyY2xlXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAudHJhbnNpdGlvbigpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuc3R5bGUoXCJvcGFjaXR5XCIsIGZ1bmN0aW9uIChkKSB7IG9wYWNpdHkoZC5zaXplKTsgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbn1cblxuXG5mdW5jdGlvbiByZW5kZXJCYXJHcmFwaCh0b3BpY19udW1iZXIpIHtcbiAgdmFyIHRvcGljX3dvcmRzID0gd2luZG93LmRvY3VtZW50X3RvcGljX3Byb2JhYmlsaXR5O1xuICB2YXIgZGF0YSA9IHdpbmRvdy50b3BpY193b3JkX3Byb2JhYmlsaXR5O1xuICB2YXIgdG9waWNfZGlzdHJpYnV0aW9uX2luX2NvcnBhID0gd2luZG93LndvcmRfZGlzdHJpYnV0aW9uX2luX2NvcnBvcmE7XG4gIHZhciBmaW5hbF9kYXRhID0gW107XG4gIHZhciBkYXRhID0gZGF0YVt0b3BpY19udW1iZXJdWzBdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuICAgIHZhciB0ZW1wID0ge307XG4gICAgdmFyIGtleSA9IE9iamVjdC5rZXlzKGRhdGFbaV0pWzBdO1xuICAgIHZhciB2YWwgPSBkYXRhW2ldW09iamVjdC5rZXlzKGRhdGFbaV0pWzBdXTtcbiAgICB2YXIgb3ZlcmFsbCA9IHRvcGljX2Rpc3RyaWJ1dGlvbl9pbl9jb3JwYVtrZXldO1xuICAgIHRlbXAuU3RhdGUgPSBrZXk7XG4gICAgdGVtcC50b3BpY19mcmVxdWVuY3kgPSB2YWw7XG4gICAgdGVtcC5vdmVyYWxsID0gb3ZlcmFsbDtcbiAgICB0ZW1wLnRvdGFsID0gdGVtcC50b3BpY19mcmVxdWVuY3kgKyB0ZW1wLm92ZXJhbGw7XG4gICAgZmluYWxfZGF0YS5wdXNoKHRlbXApO1xuICB9XG5cbiAgdmFyIGJiID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3N0YWNrZWQtYmFyJylcbiAgICAgICAgLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLFxuICAgICAgICB3aWR0aCA9IGJiLnJpZ2h0IC0gYmIubGVmdDtcblxuICB2YXIgZGF0YSA9IGZpbmFsX2RhdGE7XG4gIHZhciBoZWlnaHQgPSBkYXRhLmxlbmd0aCAqIDI1O1xuICB2YXIgc3ZnID0gZDMuc2VsZWN0KFwiI3N0YWNrZWQtYmFyXCIpLmFwcGVuZChcInN2Z1wiKS5hdHRyKFwid2lkdGhcIiwgd2lkdGgpLmF0dHIoXCJoZWlnaHRcIiwgaGVpZ2h0KSxcbiAgICAgIG1hcmdpbiA9IHtcbiAgICB0b3A6IDIwLFxuICAgIHJpZ2h0OiAyMCxcbiAgICBib3R0b206IDMwLFxuICAgIGxlZnQ6IDUwXG4gIH0sXG4gICAgICB3aWR0aCA9ICtzdmcuYXR0cihcIndpZHRoXCIpIC0gbWFyZ2luLmxlZnQgLSBtYXJnaW4ucmlnaHQsXG4gICAgICBoZWlnaHQgPSArc3ZnLmF0dHIoXCJoZWlnaHRcIikgLSBtYXJnaW4udG9wIC0gbWFyZ2luLmJvdHRvbSxcbiAgICAgIGcgPSBzdmcuYXBwZW5kKFwiZ1wiKS5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKFwiICsgbWFyZ2luLmxlZnQgKyBcIixcIiArIG1hcmdpbi50b3AgKyBcIilcIik7XG4gIHZhciB5ID0gZDMuc2NhbGVCYW5kKCkgLy8geCA9IGQzLnNjYWxlQmFuZCgpICBcbiAgLnJhbmdlUm91bmQoWzAsIGhlaWdodF0pIC8vIC5yYW5nZVJvdW5kKFswLCB3aWR0aF0pXG4gIC5wYWRkaW5nSW5uZXIoMC4yNSkuYWxpZ24oMC4xKTtcbiAgdmFyIHggPSBkMy5zY2FsZUxpbmVhcigpIC8vIHkgPSBkMy5zY2FsZUxpbmVhcigpXG4gIC5yYW5nZVJvdW5kKFswLCB3aWR0aF0pOyAvLyAucmFuZ2VSb3VuZChbaGVpZ2h0LCAwXSk7XG5cbiAgdmFyIHogPSBkMy5zY2FsZU9yZGluYWwoKS5yYW5nZShbXCIjQzg0MjNFXCIsIFwiI0ExQzdFMFwiXSk7XG4gIHZhciBrZXlzID0gW1widG9waWNfZnJlcXVlbmN5XCIsIFwib3ZlcmFsbFwiXTtcbiAgZGF0YS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIGIudG90YWwgLSBhLnRvdGFsO1xuICB9KTtcbiAgeS5kb21haW4oZGF0YS5tYXAoZnVuY3Rpb24gKGQpIHtcbiAgICByZXR1cm4gZC5TdGF0ZTtcbiAgfSkpOyAvLyB4LmRvbWFpbi4uLlxuXG4gIHguZG9tYWluKFswLCBkMy5tYXgoZGF0YSwgZnVuY3Rpb24gKGQpIHtcbiAgICByZXR1cm4gZC50b3RhbDtcbiAgfSldKS5uaWNlKCk7IC8vIHkuZG9tYWluLi4uXG5cbiAgei5kb21haW4oa2V5cyk7XG4gIGcuYXBwZW5kKFwiZ1wiKS5zZWxlY3RBbGwoXCJnXCIpLmRhdGEoZDMuc3RhY2soKS5rZXlzKGtleXMpKGRhdGEpKS5lbnRlcigpLmFwcGVuZChcImdcIikuYXR0cihcImZpbGxcIiwgZnVuY3Rpb24gKGQpIHtcbiAgICByZXR1cm4geihkLmtleSk7XG4gIH0pLnNlbGVjdEFsbChcInJlY3RcIikuZGF0YShmdW5jdGlvbiAoZCkge1xuICAgIHJldHVybiBkO1xuICB9KS5lbnRlcigpLmFwcGVuZChcInJlY3RcIikuYXR0cihcInlcIiwgZnVuY3Rpb24gKGQpIHtcbiAgICByZXR1cm4geShkLmRhdGEuU3RhdGUpO1xuICB9KSAvLy5hdHRyKFwieFwiLCBmdW5jdGlvbihkKSB7IHJldHVybiB4KGQuZGF0YS5TdGF0ZSk7IH0pXG4gIC5hdHRyKFwieFwiLCBmdW5jdGlvbiAoZCkge1xuICAgIHJldHVybiB4KGRbMF0pO1xuICB9KSAvLy5hdHRyKFwieVwiLCBmdW5jdGlvbihkKSB7IHJldHVybiB5KGRbMV0pOyB9KSAgXG4gIC5hdHRyKFwid2lkdGhcIiwgZnVuY3Rpb24gKGQpIHtcbiAgICByZXR1cm4geChkWzFdKSAtIHgoZFswXSk7XG4gIH0pIC8vLmF0dHIoXCJoZWlnaHRcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4geShkWzBdKSAtIHkoZFsxXSk7IH0pXG4gIC5hdHRyKFwiaGVpZ2h0XCIsIHkuYmFuZHdpZHRoKCkpXG4gIC5hdHRyKFwib3BhY2l0eVwiLCAwLjgpOyAvLy5hdHRyKFwid2lkdGhcIiwgeC5iYW5kd2lkdGgoKSk7IFxuXG4gIGcuYXBwZW5kKFwiZ1wiKS5hdHRyKFwiY2xhc3NcIiwgXCJheGlzXCIpLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoMCwwKVwiKSAvLyAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoMCxcIiArIGhlaWdodCArIFwiKVwiKVxuICAuY2FsbChkMy5heGlzTGVmdCh5KSk7IC8vICAgLmNhbGwoZDMuYXhpc0JvdHRvbSh4KSk7XG5cbiAgZy5hcHBlbmQoXCJnXCIpLmF0dHIoXCJjbGFzc1wiLCBcImF4aXNcIikuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZSgwLFwiICsgaGVpZ2h0ICsgXCIpXCIpIC8vIE5ldyBsaW5lXG4gIC5jYWxsKGQzLmF4aXNCb3R0b20oeCkudGlja3MobnVsbCwgXCJzXCIpKSAvLyAgLmNhbGwoZDMuYXhpc0xlZnQoeSkudGlja3MobnVsbCwgXCJzXCIpKVxuICAuYXBwZW5kKFwidGV4dFwiKS5hdHRyKFwieVwiLCAyKSAvLyAgICAgLmF0dHIoXCJ5XCIsIDIpXG4gIC5hdHRyKFwieFwiLCB4KHgudGlja3MoKS5wb3AoKSkgKyAwLjUpIC8vICAgICAuYXR0cihcInlcIiwgeSh5LnRpY2tzKCkucG9wKCkpICsgMC41KVxuICAuYXR0cihcImR5XCIsIFwiMC4zMmVtXCIpIC8vICAgICAuYXR0cihcImR5XCIsIFwiMC4zMmVtXCIpXG4gIHZhciBsZWdlbmQgPSBnLmFwcGVuZChcImdcIikuYXR0cihcImZvbnQtZmFtaWx5XCIsIFwic2Fucy1zZXJpZlwiKS5hdHRyKFwiZm9udC1zaXplXCIsIDEwKS5hdHRyKFwidGV4dC1hbmNob3JcIiwgXCJlbmRcIikuc2VsZWN0QWxsKFwiZ1wiKS5kYXRhKGtleXMuc2xpY2UoKS5yZXZlcnNlKCkpLmVudGVyKCkuYXBwZW5kKFwiZ1wiKSAvLy5hdHRyKFwidHJhbnNmb3JtXCIsIGZ1bmN0aW9uKGQsIGkpIHsgcmV0dXJuIFwidHJhbnNsYXRlKDAsXCIgKyBpICogMjAgKyBcIilcIjsgfSk7XG4gIC5hdHRyKFwidHJhbnNmb3JtXCIsIGZ1bmN0aW9uIChkLCBpKSB7XG4gICAgcmV0dXJuIFwidHJhbnNsYXRlKC01MCxcIiArICgzMDAgKyBpICogMjApICsgXCIpXCI7XG4gIH0pO1xuICBsZWdlbmQuYXBwZW5kKFwicmVjdFwiKS5hdHRyKFwieFwiLCB3aWR0aCAtIDE5KS5hdHRyKFwid2lkdGhcIiwgMTkpLmF0dHIoXCJoZWlnaHRcIiwgMTkpLmF0dHIoXCJmaWxsXCIsIHopO1xuICBsZWdlbmQuYXBwZW5kKFwidGV4dFwiKS5hdHRyKFwieFwiLCB3aWR0aCAtIDI0KS5hdHRyKFwieVwiLCA5LjUpLmF0dHIoXCJkeVwiLCBcIjAuMzJlbVwiKS50ZXh0KGZ1bmN0aW9uIChkKSB7XG4gICAgcmV0dXJuIGQ7XG4gIH0pO1xufVxuXG5cblxuZnVuY3Rpb24gaW5pdFBhZ2UyKCl7XG5cbn1cblxuZnVuY3Rpb24gaW5pdFBhZ2UzKCl7XG4gICAgbG9hZFBhcmFsbGVsQ29vcmRpbmF0ZSgpO1xufSIsIi8vdmVjdG9ycyBmb3JtYXQ6IE1hcFtzdHJpbmcodG9waWNfaWQpOiBMaXN0W2Zsb2F0XV1cbmZ1bmN0aW9uIGdldDJEVmVjdG9ycyh2ZWN0b3JzLCBzdWNjZXNzQ2FsbGJhY2spe1xuICAgIHZhciByZXF1ZXN0ID0gJC5hamF4KHtcbiAgICAgICAgdXJsOiBcIi9nZXQyRFZlY3RvcnNcIixcbiAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgICAgZGF0YTogdmVjdG9yc1xuICAgICAgfSk7XG4gICAgICAgXG4gICAgICByZXF1ZXN0LmRvbmUoZnVuY3Rpb24oIHJlc3BvbnNlICkge1xuICAgICAgICBzdWNjZXNzQ2FsbGJhY2socmVzcG9uc2UpO1xuICAgICAgfSk7XG4gICAgICAgXG4gICAgICByZXF1ZXN0LmZhaWwoZnVuY3Rpb24oIGpxWEhSLCB0ZXh0U3RhdHVzICkge1xuICAgICAgICBhbGVydCggXCJSZXF1ZXN0IGZhaWxlZDogXCIgKyB0ZXh0U3RhdHVzICk7XG4gICAgICB9KTtcbn1cblxuLy8gZG9jcyBmb3JtYXQ6IExpc3RbTGlzdFtzdHJpbmcod29yZCldXVxuZnVuY3Rpb24gZ2V0V29yZDJWZWNDbHVzdGVycyhkb2NzLCBzdWNjZXNzQ2FsbGJhY2spe1xuICAgIHZhciByZXF1ZXN0ID0gJC5hamF4KHtcbiAgICAgICAgdXJsOiBcIi9nZXQyRFZlY3RvcnNcIixcbiAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgICAgZGF0YToge2RvY3M6IGRvY3N9XG4gICAgICB9KTtcbiAgICAgICBcbiAgICAgIHJlcXVlc3QuZG9uZShmdW5jdGlvbiggcmVzcG9uc2UgKSB7XG4gICAgICAgIHN1Y2Nlc3NDYWxsYmFjayhyZXNwb25zZSk7XG4gICAgICB9KTtcbiAgICAgICBcbiAgICAgIHJlcXVlc3QuZmFpbChmdW5jdGlvbigganFYSFIsIHRleHRTdGF0dXMgKSB7XG4gICAgICAgIGFsZXJ0KCBcIlJlcXVlc3QgZmFpbGVkOiBcIiArIHRleHRTdGF0dXMgKTtcbiAgICAgIH0pO1xufVxuXG4iLCJmdW5jdGlvbiBsb2FkUGFyYWxsZWxDb29yZGluYXRlKCl7XG4gICAgdmFyIG1hcmdpbiA9IHt0b3A6IDMwLCByaWdodDogMTAsIGJvdHRvbTogMTAsIGxlZnQ6IDEwfSxcbiAgICAgICAgd2lkdGggPSA5NjAgLSBtYXJnaW4ubGVmdCAtIG1hcmdpbi5yaWdodCxcbiAgICAgICAgaGVpZ2h0ID0gNTAwIC0gbWFyZ2luLnRvcCAtIG1hcmdpbi5ib3R0b207XG5cbiAgICB2YXIgeCA9IGQzLnNjYWxlLm9yZGluYWwoKS5yYW5nZVBvaW50cyhbMCwgd2lkdGhdLCAxKSxcbiAgICAgICAgeSA9IHt9LFxuICAgICAgICBkcmFnZ2luZyA9IHt9O1xuXG4gICAgdmFyIGxpbmUgPSBkMy5zdmcubGluZSgpLFxuICAgICAgICBheGlzID0gZDMuc3ZnLmF4aXMoKS5vcmllbnQoXCJsZWZ0XCIpLFxuICAgICAgICBiYWNrZ3JvdW5kLFxuICAgICAgICBmb3JlZ3JvdW5kO1xuXG4gICAgdmFyIHN2ZyA9IGQzLnNlbGVjdChcImJvZHlcIikuYXBwZW5kKFwic3ZnXCIpXG4gICAgICAgIC5hdHRyKFwid2lkdGhcIiwgd2lkdGggKyBtYXJnaW4ubGVmdCArIG1hcmdpbi5yaWdodClcbiAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgaGVpZ2h0ICsgbWFyZ2luLnRvcCArIG1hcmdpbi5ib3R0b20pXG4gICAgLmFwcGVuZChcImdcIilcbiAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoXCIgKyBtYXJnaW4ubGVmdCArIFwiLFwiICsgbWFyZ2luLnRvcCArIFwiKVwiKTtcblxuICAgIGQzLmNzdihcImNhcnMuY3N2XCIsIGZ1bmN0aW9uKGVycm9yLCBjYXJzKSB7XG5cbiAgICAvLyBFeHRyYWN0IHRoZSBsaXN0IG9mIGRpbWVuc2lvbnMgYW5kIGNyZWF0ZSBhIHNjYWxlIGZvciBlYWNoLlxuICAgIHguZG9tYWluKGRpbWVuc2lvbnMgPSBkMy5rZXlzKGNhcnNbMF0pLmZpbHRlcihmdW5jdGlvbihkKSB7XG4gICAgICAgIHJldHVybiBkICE9IFwibmFtZVwiICYmICh5W2RdID0gZDMuc2NhbGUubGluZWFyKClcbiAgICAgICAgICAgIC5kb21haW4oZDMuZXh0ZW50KGNhcnMsIGZ1bmN0aW9uKHApIHsgcmV0dXJuICtwW2RdOyB9KSlcbiAgICAgICAgICAgIC5yYW5nZShbaGVpZ2h0LCAwXSkpO1xuICAgIH0pKTtcblxuICAgIC8vIEFkZCBncmV5IGJhY2tncm91bmQgbGluZXMgZm9yIGNvbnRleHQuXG4gICAgYmFja2dyb3VuZCA9IHN2Zy5hcHBlbmQoXCJnXCIpXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJiYWNrZ3JvdW5kXCIpXG4gICAgICAgIC5zZWxlY3RBbGwoXCJwYXRoXCIpXG4gICAgICAgIC5kYXRhKGNhcnMpXG4gICAgICAgIC5lbnRlcigpLmFwcGVuZChcInBhdGhcIilcbiAgICAgICAgLmF0dHIoXCJkXCIsIHBhdGgpO1xuXG4gICAgLy8gQWRkIGJsdWUgZm9yZWdyb3VuZCBsaW5lcyBmb3IgZm9jdXMuXG4gICAgZm9yZWdyb3VuZCA9IHN2Zy5hcHBlbmQoXCJnXCIpXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJmb3JlZ3JvdW5kXCIpXG4gICAgICAgIC5zZWxlY3RBbGwoXCJwYXRoXCIpXG4gICAgICAgIC5kYXRhKGNhcnMpXG4gICAgICAgIC5lbnRlcigpLmFwcGVuZChcInBhdGhcIilcbiAgICAgICAgLmF0dHIoXCJkXCIsIHBhdGgpO1xuXG4gICAgLy8gQWRkIGEgZ3JvdXAgZWxlbWVudCBmb3IgZWFjaCBkaW1lbnNpb24uXG4gICAgdmFyIGcgPSBzdmcuc2VsZWN0QWxsKFwiLmRpbWVuc2lvblwiKVxuICAgICAgICAuZGF0YShkaW1lbnNpb25zKVxuICAgICAgICAuZW50ZXIoKS5hcHBlbmQoXCJnXCIpXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJkaW1lbnNpb25cIilcbiAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gXCJ0cmFuc2xhdGUoXCIgKyB4KGQpICsgXCIpXCI7IH0pXG4gICAgICAgIC5jYWxsKGQzLmJlaGF2aW9yLmRyYWcoKVxuICAgICAgICAgICAgLm9yaWdpbihmdW5jdGlvbihkKSB7IHJldHVybiB7eDogeChkKX07IH0pXG4gICAgICAgICAgICAub24oXCJkcmFnc3RhcnRcIiwgZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgZHJhZ2dpbmdbZF0gPSB4KGQpO1xuICAgICAgICAgICAgYmFja2dyb3VuZC5hdHRyKFwidmlzaWJpbGl0eVwiLCBcImhpZGRlblwiKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAub24oXCJkcmFnXCIsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgIGRyYWdnaW5nW2RdID0gTWF0aC5taW4od2lkdGgsIE1hdGgubWF4KDAsIGQzLmV2ZW50LngpKTtcbiAgICAgICAgICAgIGZvcmVncm91bmQuYXR0cihcImRcIiwgcGF0aCk7XG4gICAgICAgICAgICBkaW1lbnNpb25zLnNvcnQoZnVuY3Rpb24oYSwgYikgeyByZXR1cm4gcG9zaXRpb24oYSkgLSBwb3NpdGlvbihiKTsgfSk7XG4gICAgICAgICAgICB4LmRvbWFpbihkaW1lbnNpb25zKTtcbiAgICAgICAgICAgIGcuYXR0cihcInRyYW5zZm9ybVwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBcInRyYW5zbGF0ZShcIiArIHBvc2l0aW9uKGQpICsgXCIpXCI7IH0pXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLm9uKFwiZHJhZ2VuZFwiLCBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICBkZWxldGUgZHJhZ2dpbmdbZF07XG4gICAgICAgICAgICB0cmFuc2l0aW9uKGQzLnNlbGVjdCh0aGlzKSkuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZShcIiArIHgoZCkgKyBcIilcIik7XG4gICAgICAgICAgICB0cmFuc2l0aW9uKGZvcmVncm91bmQpLmF0dHIoXCJkXCIsIHBhdGgpO1xuICAgICAgICAgICAgYmFja2dyb3VuZFxuICAgICAgICAgICAgICAgIC5hdHRyKFwiZFwiLCBwYXRoKVxuICAgICAgICAgICAgICAgIC50cmFuc2l0aW9uKClcbiAgICAgICAgICAgICAgICAuZGVsYXkoNTAwKVxuICAgICAgICAgICAgICAgIC5kdXJhdGlvbigwKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwidmlzaWJpbGl0eVwiLCBudWxsKTtcbiAgICAgICAgICAgIH0pKTtcblxuICAgIC8vIEFkZCBhbiBheGlzIGFuZCB0aXRsZS5cbiAgICBnLmFwcGVuZChcImdcIilcbiAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImF4aXNcIilcbiAgICAgICAgLmVhY2goZnVuY3Rpb24oZCkgeyBkMy5zZWxlY3QodGhpcykuY2FsbChheGlzLnNjYWxlKHlbZF0pKTsgfSlcbiAgICAgICAgLmFwcGVuZChcInRleHRcIilcbiAgICAgICAgLnN0eWxlKFwidGV4dC1hbmNob3JcIiwgXCJtaWRkbGVcIilcbiAgICAgICAgLmF0dHIoXCJ5XCIsIC05KVxuICAgICAgICAudGV4dChmdW5jdGlvbihkKSB7IHJldHVybiBkOyB9KTtcblxuICAgIC8vIEFkZCBhbmQgc3RvcmUgYSBicnVzaCBmb3IgZWFjaCBheGlzLlxuICAgIGcuYXBwZW5kKFwiZ1wiKVxuICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwiYnJ1c2hcIilcbiAgICAgICAgLmVhY2goZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgZDMuc2VsZWN0KHRoaXMpLmNhbGwoeVtkXS5icnVzaCA9IGQzLnN2Zy5icnVzaCgpLnkoeVtkXSkub24oXCJicnVzaHN0YXJ0XCIsIGJydXNoc3RhcnQpLm9uKFwiYnJ1c2hcIiwgYnJ1c2gpKTtcbiAgICAgICAgfSlcbiAgICAgICAgLnNlbGVjdEFsbChcInJlY3RcIilcbiAgICAgICAgLmF0dHIoXCJ4XCIsIC04KVxuICAgICAgICAuYXR0cihcIndpZHRoXCIsIDE2KTtcbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIHBvc2l0aW9uKGQpIHtcbiAgICB2YXIgdiA9IGRyYWdnaW5nW2RdO1xuICAgIHJldHVybiB2ID09IG51bGwgPyB4KGQpIDogdjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0cmFuc2l0aW9uKGcpIHtcbiAgICByZXR1cm4gZy50cmFuc2l0aW9uKCkuZHVyYXRpb24oNTAwKTtcbiAgICB9XG5cbiAgICAvLyBSZXR1cm5zIHRoZSBwYXRoIGZvciBhIGdpdmVuIGRhdGEgcG9pbnQuXG4gICAgZnVuY3Rpb24gcGF0aChkKSB7XG4gICAgcmV0dXJuIGxpbmUoZGltZW5zaW9ucy5tYXAoZnVuY3Rpb24ocCkgeyByZXR1cm4gW3Bvc2l0aW9uKHApLCB5W3BdKGRbcF0pXTsgfSkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGJydXNoc3RhcnQoKSB7XG4gICAgZDMuZXZlbnQuc291cmNlRXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlcyBhIGJydXNoIGV2ZW50LCB0b2dnbGluZyB0aGUgZGlzcGxheSBvZiBmb3JlZ3JvdW5kIGxpbmVzLlxuICAgIGZ1bmN0aW9uIGJydXNoKCkge1xuICAgIHZhciBhY3RpdmVzID0gZGltZW5zaW9ucy5maWx0ZXIoZnVuY3Rpb24ocCkgeyByZXR1cm4gIXlbcF0uYnJ1c2guZW1wdHkoKTsgfSksXG4gICAgICAgIGV4dGVudHMgPSBhY3RpdmVzLm1hcChmdW5jdGlvbihwKSB7IHJldHVybiB5W3BdLmJydXNoLmV4dGVudCgpOyB9KTtcbiAgICBmb3JlZ3JvdW5kLnN0eWxlKFwiZGlzcGxheVwiLCBmdW5jdGlvbihkKSB7XG4gICAgICAgIHJldHVybiBhY3RpdmVzLmV2ZXJ5KGZ1bmN0aW9uKHAsIGkpIHtcbiAgICAgICAgcmV0dXJuIGV4dGVudHNbaV1bMF0gPD0gZFtwXSAmJiBkW3BdIDw9IGV4dGVudHNbaV1bMV07XG4gICAgICAgIH0pID8gbnVsbCA6IFwibm9uZVwiO1xuICAgIH0pO1xuICAgIH1cblxufSIsImZ1bmN0aW9uIGdlbmVyYXRlVG9waWNWZWN0b3JzKCl7XG4gICAgd2luZG93LnRvcGljVmVjdG9ycyA9IHt9O1xuICAgIGlmKHdpbmRvdy50b3BpY193b3JkX3Byb2JhYmlsaXR5X2luX3RvcGljKXtcbiAgICAgICAgZm9yKHZhciB4IGluIHdpbmRvdy50b3BpY193b3JkX3Byb2JhYmlsaXR5X2luX3RvcGljKXtcbiAgICAgICAgICAgIHZhciB2ZWN0b3IgPSBbXTtcbiAgICAgICAgICAgIGZvcih2YXIgeSBpbiB3aW5kb3cudG9waWNfd29yZF9wcm9iYWJpbGl0eV9pbl90b3BpY1t4XSl7XG4gICAgICAgICAgICAgICAgdmVjdG9yLnB1c2god2luZG93LnRvcGljX3dvcmRfcHJvYmFiaWxpdHlfaW5fdG9waWNbeF1beV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgd2luZG93LnRvcGljVmVjdG9yc1t4XSA9IHZlY3RvcjtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gZ2VuZXJhdGVQYXJhbGxlbENvb3JkaW5hdGVEYXRhKCl7XG4gICAgdmFyIHdvcmRzID0gd2luZG93LndvcmRfZGlzdHJpYnV0aW9uX2luX2NvcnBvcmEua2V5cygpO1xuICAgIHZhciB0b3BpY193b3JkX3RocmVzaG9sZCA9IDAuMztcbiAgICB3aW5kb3cudG9waWNfd29yZF9wcm9iYWJpbGl0eS5tYXAoeCA9PiB7XG4gICAgICAgIFxuICAgIH0pO1xufVxuXG4iLCJ3aW5kb3cudnVlQXBwID0gbmV3IFZ1ZSh7XG4gICAgZWw6ICcjdnVlLWFwcCcsXG4gICAgZGF0YToge1xuICAgICAgICBtZXNzYWdlOiAnSGVsbG8gdXNlciEnLFxuICAgICAgICBub25lU2VsZWN0ZWQ6IHRydWUsXG4gICAgICAgIHNlbGVjdGVkUGFnZTogMSxcbiAgICAgICAgcGxheWVyRGV0YWlsOiB7XG4gICAgICAgICAgICBuYW1lOiBcIjxQbGF5ZXIgTmFtZT5cIlxuICAgICAgICB9LFxuICAgICAgICBvdmVydmlld0ZpbHRlcnM6IHt9LFxuICAgICAgICBzZWxlY3RlZE1hcDogMVxuICAgIH0sXG4gICAgbWV0aG9kczoge1xuICAgICAgICBzZWxlY3RQYWdlOiBmdW5jdGlvbih4KXtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRQYWdlID0geDtcbiAgICAgICAgICAgIGlmICh4ID09IDEpe1xuICAgICAgICAgICAgICAgIGluaXRQYWdlMSgwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh4ID09IDIpe1xuICAgICAgICAgICAgICAgIGluaXRQYWdlMigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHggPT0gMyl7XG4gICAgICAgICAgICAgICAgaW5pdFBhZ2UzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuICAgIG1vdW50ZWQ6IGZ1bmN0aW9uKCl7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiTW91bnRlZFwiKTtcbiAgICAgICAgbG9hZEQzKCk7XG4gICAgICAgIGxvYWRKcXVlcnkoKTtcbiAgICB9XG59KTsiXX0=
