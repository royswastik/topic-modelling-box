"use strict";

function loadJquery() {
  $(document).ready(function () {
    $("#toggle-sidebar").click(function () {
      $('.ui.sidebar').sidebar('toggle');
    });
  });
}
"use strict";

function loadD3() {
  console.log("hello");
  d3.csv("data/document_topic_probability.json", function (x) {
    window.document_topic_probability = x;
    d3.csv("data/topic_word_distribution_in_corpora.json", function (y) {
      window.word_distribution_in_corpora = y;
      d3.csv("data/topic_word_probability_in_topic.json", function (z) {
        window.topic_word_probability_in_topic = z;
        generateTopicVectors(); //Loads vectors in window.topicVectors

        loadVisualizations();
      });
    });
  });
}

function loadVisualizations() {}

function initPage1() {}

function initPage2() {}

function initPage3() {
  loadParallelCoordinate();
}
"use strict";

function get2DVectors(vectors, successCallback) {
  var request = $.ajax({
    url: "/get2DVectors",
    method: "POST",
    data: vectors
  });
  request.done(function (response) {
    successCallback(response);
  });
  request.fail(function (jqXHR, textStatus) {
    alert("Request failed: " + textStatus);
  });
}
"use strict";

function loadParallelCoordinate() {
  var margin = {
    top: 30,
    right: 10,
    bottom: 10,
    left: 10
  },
      width = 960 - margin.left - margin.right,
      height = 500 - margin.top - margin.bottom;
  var x = d3.scale.ordinal().rangePoints([0, width], 1),
      y = {},
      dragging = {};
  var line = d3.svg.line(),
      axis = d3.svg.axis().orient("left"),
      background,
      foreground;
  var svg = d3.select("body").append("svg").attr("width", width + margin.left + margin.right).attr("height", height + margin.top + margin.bottom).append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");
  d3.csv("cars.csv", function (error, cars) {
    // Extract the list of dimensions and create a scale for each.
    x.domain(dimensions = d3.keys(cars[0]).filter(function (d) {
      return d != "name" && (y[d] = d3.scale.linear().domain(d3.extent(cars, function (p) {
        return +p[d];
      })).range([height, 0]));
    })); // Add grey background lines for context.

    background = svg.append("g").attr("class", "background").selectAll("path").data(cars).enter().append("path").attr("d", path); // Add blue foreground lines for focus.

    foreground = svg.append("g").attr("class", "foreground").selectAll("path").data(cars).enter().append("path").attr("d", path); // Add a group element for each dimension.

    var g = svg.selectAll(".dimension").data(dimensions).enter().append("g").attr("class", "dimension").attr("transform", function (d) {
      return "translate(" + x(d) + ")";
    }).call(d3.behavior.drag().origin(function (d) {
      return {
        x: x(d)
      };
    }).on("dragstart", function (d) {
      dragging[d] = x(d);
      background.attr("visibility", "hidden");
    }).on("drag", function (d) {
      dragging[d] = Math.min(width, Math.max(0, d3.event.x));
      foreground.attr("d", path);
      dimensions.sort(function (a, b) {
        return position(a) - position(b);
      });
      x.domain(dimensions);
      g.attr("transform", function (d) {
        return "translate(" + position(d) + ")";
      });
    }).on("dragend", function (d) {
      delete dragging[d];
      transition(d3.select(this)).attr("transform", "translate(" + x(d) + ")");
      transition(foreground).attr("d", path);
      background.attr("d", path).transition().delay(500).duration(0).attr("visibility", null);
    })); // Add an axis and title.

    g.append("g").attr("class", "axis").each(function (d) {
      d3.select(this).call(axis.scale(y[d]));
    }).append("text").style("text-anchor", "middle").attr("y", -9).text(function (d) {
      return d;
    }); // Add and store a brush for each axis.

    g.append("g").attr("class", "brush").each(function (d) {
      d3.select(this).call(y[d].brush = d3.svg.brush().y(y[d]).on("brushstart", brushstart).on("brush", brush));
    }).selectAll("rect").attr("x", -8).attr("width", 16);
  });

  function position(d) {
    var v = dragging[d];
    return v == null ? x(d) : v;
  }

  function transition(g) {
    return g.transition().duration(500);
  } // Returns the path for a given data point.


  function path(d) {
    return line(dimensions.map(function (p) {
      return [position(p), y[p](d[p])];
    }));
  }

  function brushstart() {
    d3.event.sourceEvent.stopPropagation();
  } // Handles a brush event, toggling the display of foreground lines.


  function brush() {
    var actives = dimensions.filter(function (p) {
      return !y[p].brush.empty();
    }),
        extents = actives.map(function (p) {
      return y[p].brush.extent();
    });
    foreground.style("display", function (d) {
      return actives.every(function (p, i) {
        return extents[i][0] <= d[p] && d[p] <= extents[i][1];
      }) ? null : "none";
    });
  }
}
"use strict";

function generateTopicVectors() {
  window.topicVectors = {};

  if (window.topic_word_probability_in_topic) {
    for (var x in window.topic_word_probability_in_topic) {
      var vector = [];

      for (var y in window.topic_word_probability_in_topic[x]) {
        vector.push(window.topic_word_probability_in_topic[x][y]);
      }

      window.topicVectors[x] = vector;
    }
  }
}

function generateParallelCoordinateData() {
  var words = window.topic_word_probability_in_topic;
}
"use strict";

window.vueApp = new Vue({
  el: '#vue-app',
  data: {
    message: 'Hello user!',
    noneSelected: true,
    selectedPage: 1,
    playerDetail: {
      name: "<Player Name>"
    },
    overviewFilters: {},
    selectedMap: 1
  },
  methods: {
    selectPage: function selectPage(x) {
      this.selectedPage = x;

      if (x == 1) {
        initPage1();
      }

      if (x == 2) {
        initPage2();
      }

      if (x == 3) {
        initPage3();
      }
    }
  },
  mounted: function mounted() {
    console.log("Mounted");
    loadD3();
    loadJquery();
  }
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImV2ZW50cy5qcyIsIm1haW4uanMiLCJuZXR3b3JrLmpzIiwicGFyYWxsZWwtY29vcmRpbmF0ZS5qcyIsInV0aWwuanMiLCJ2dWVfbW9kZWwuanMiXSwibmFtZXMiOlsibG9hZEpxdWVyeSIsIiQiLCJkb2N1bWVudCIsInJlYWR5IiwiY2xpY2siLCJzaWRlYmFyIiwibG9hZEQzIiwiY29uc29sZSIsImxvZyIsImQzIiwiY3N2IiwieCIsIndpbmRvdyIsImRvY3VtZW50X3RvcGljX3Byb2JhYmlsaXR5IiwieSIsIndvcmRfZGlzdHJpYnV0aW9uX2luX2NvcnBvcmEiLCJ6IiwidG9waWNfd29yZF9wcm9iYWJpbGl0eV9pbl90b3BpYyIsImdlbmVyYXRlVG9waWNWZWN0b3JzIiwibG9hZFZpc3VhbGl6YXRpb25zIiwiaW5pdFBhZ2UxIiwiaW5pdFBhZ2UyIiwiaW5pdFBhZ2UzIiwibG9hZFBhcmFsbGVsQ29vcmRpbmF0ZSIsImdldDJEVmVjdG9ycyIsInZlY3RvcnMiLCJzdWNjZXNzQ2FsbGJhY2siLCJyZXF1ZXN0IiwiYWpheCIsInVybCIsIm1ldGhvZCIsImRhdGEiLCJkb25lIiwicmVzcG9uc2UiLCJmYWlsIiwianFYSFIiLCJ0ZXh0U3RhdHVzIiwiYWxlcnQiLCJtYXJnaW4iLCJ0b3AiLCJyaWdodCIsImJvdHRvbSIsImxlZnQiLCJ3aWR0aCIsImhlaWdodCIsInNjYWxlIiwib3JkaW5hbCIsInJhbmdlUG9pbnRzIiwiZHJhZ2dpbmciLCJsaW5lIiwic3ZnIiwiYXhpcyIsIm9yaWVudCIsImJhY2tncm91bmQiLCJmb3JlZ3JvdW5kIiwic2VsZWN0IiwiYXBwZW5kIiwiYXR0ciIsImVycm9yIiwiY2FycyIsImRvbWFpbiIsImRpbWVuc2lvbnMiLCJrZXlzIiwiZmlsdGVyIiwiZCIsImxpbmVhciIsImV4dGVudCIsInAiLCJyYW5nZSIsInNlbGVjdEFsbCIsImVudGVyIiwicGF0aCIsImciLCJjYWxsIiwiYmVoYXZpb3IiLCJkcmFnIiwib3JpZ2luIiwib24iLCJNYXRoIiwibWluIiwibWF4IiwiZXZlbnQiLCJzb3J0IiwiYSIsImIiLCJwb3NpdGlvbiIsInRyYW5zaXRpb24iLCJkZWxheSIsImR1cmF0aW9uIiwiZWFjaCIsInN0eWxlIiwidGV4dCIsImJydXNoIiwiYnJ1c2hzdGFydCIsInYiLCJtYXAiLCJzb3VyY2VFdmVudCIsInN0b3BQcm9wYWdhdGlvbiIsImFjdGl2ZXMiLCJlbXB0eSIsImV4dGVudHMiLCJldmVyeSIsImkiLCJ0b3BpY1ZlY3RvcnMiLCJ2ZWN0b3IiLCJwdXNoIiwiZ2VuZXJhdGVQYXJhbGxlbENvb3JkaW5hdGVEYXRhIiwid29yZHMiLCJ2dWVBcHAiLCJWdWUiLCJlbCIsIm1lc3NhZ2UiLCJub25lU2VsZWN0ZWQiLCJzZWxlY3RlZFBhZ2UiLCJwbGF5ZXJEZXRhaWwiLCJuYW1lIiwib3ZlcnZpZXdGaWx0ZXJzIiwic2VsZWN0ZWRNYXAiLCJtZXRob2RzIiwic2VsZWN0UGFnZSIsIm1vdW50ZWQiXSwibWFwcGluZ3MiOiI7O0FBQUEsU0FBU0EsVUFBVCxHQUFxQjtBQUNqQkMsRUFBQUEsQ0FBQyxDQUFDQyxRQUFELENBQUQsQ0FBWUMsS0FBWixDQUFrQixZQUFVO0FBQ3hCRixJQUFBQSxDQUFDLENBQUMsaUJBQUQsQ0FBRCxDQUFxQkcsS0FBckIsQ0FBMkIsWUFBVTtBQUNqQ0gsTUFBQUEsQ0FBQyxDQUFDLGFBQUQsQ0FBRCxDQUNLSSxPQURMLENBQ2EsUUFEYjtBQUdILEtBSkQ7QUFNSCxHQVBEO0FBUUg7OztBQ1RELFNBQVNDLE1BQVQsR0FBaUI7QUFDYkMsRUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksT0FBWjtBQUNBQyxFQUFBQSxFQUFFLENBQUNDLEdBQUgsQ0FBTyxzQ0FBUCxFQUErQyxVQUFTQyxDQUFULEVBQVc7QUFDdERDLElBQUFBLE1BQU0sQ0FBQ0MsMEJBQVAsR0FBbUNGLENBQW5DO0FBQ0FGLElBQUFBLEVBQUUsQ0FBQ0MsR0FBSCxDQUFPLDhDQUFQLEVBQXVELFVBQVNJLENBQVQsRUFBVztBQUM5REYsTUFBQUEs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LEVBQUUsb0JBQVM1RyxDQUFULEVBQVc7QUFDbkIsV0FBS3NHLFlBQUwsR0FBb0J0RyxDQUFwQjs7QUFDQSxVQUFJQSxDQUFDLElBQUksQ0FBVCxFQUFXO0FBQ1BTLFFBQUFBLFNBQVM7QUFDWjs7QUFDRCxVQUFJVCxDQUFDLElBQUksQ0FBVCxFQUFXO0FBQ1BVLFFBQUFBLFNBQVM7QUFDWjs7QUFDRCxVQUFJVixDQUFDLElBQUksQ0FBVCxFQUFXO0FBQ1BXLFFBQUFBLFNBQVM7QUFDWjtBQUNKO0FBWkksR0FaVztBQTBCcEJrRyxFQUFBQSxPQUFPLEVBQUUsbUJBQVU7QUFDZmpILElBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLFNBQVo7QUFDQUYsSUFBQUEsTUFBTTtBQUNOTixJQUFBQSxVQUFVO0FBQ2I7QUE5Qm1CLENBQVIsQ0FBaEIiLCJmaWxlIjoiYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gbG9hZEpxdWVyeSgpe1xyXG4gICAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKXtcclxuICAgICAgICAkKFwiI3RvZ2dsZS1zaWRlYmFyXCIpLmNsaWNrKGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICQoJy51aS5zaWRlYmFyJylcclxuICAgICAgICAgICAgICAgIC5zaWRlYmFyKCd0b2dnbGUnKVxyXG4gICAgICAgICAgICA7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgXHJcbiAgICB9KTtcclxufVxyXG4iLCJmdW5jdGlvbiBsb2FkRDMoKXtcclxuICAgIGNvbnNvbGUubG9nKFwiaGVsbG9cIik7XHJcbiAgICBkMy5jc3YoXCJkYXRhL2RvY3VtZW50X3RvcGljX3Byb2JhYmlsaXR5Lmpzb25cIiwgZnVuY3Rpb24oeCl7XHJcbiAgICAgICAgd2luZG93LmRvY3VtZW50X3RvcGljX3Byb2JhYmlsaXR5PSB4O1xyXG4gICAgICAgIGQzLmNzdihcImRhdGEvdG9waWNfd29yZF9kaXN0cmlidXRpb25faW5fY29ycG9yYS5qc29uXCIsIGZ1bmN0aW9uKHkpe1xyXG4gICAgICAgICAgICB3aW5kb3cud29yZF9kaXN0cmlidXRpb25faW5fY29ycG9yYT0geTtcclxuICAgICAgICAgICAgZDMuY3N2KFwiZGF0YS90b3BpY193b3JkX3Byb2JhYmlsaXR5X2luX3RvcGljLmpzb25cIiwgZnVuY3Rpb24oeil7XHJcbiAgICAgICAgICAgICAgICB3aW5kb3cudG9waWNfd29yZF9wcm9iYWJpbGl0eV9pbl90b3BpYyA9IHo7XHJcbiAgICAgICAgICAgICAgICBnZW5lcmF0ZVRvcGljVmVjdG9ycygpOyAvL0xvYWRzIHZlY3RvcnMgaW4gd2luZG93LnRvcGljVmVjdG9yc1xyXG4gICAgICAgICAgICAgICAgbG9hZFZpc3VhbGl6YXRpb25zKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGxvYWRWaXN1YWxpemF0aW9ucygpe1xyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gaW5pdFBhZ2UxKCl7XHJcblxyXG59XHJcblxyXG5mdW5jdGlvbiBpbml0UGFnZTIoKXtcclxuXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGluaXRQYWdlMygpe1xyXG4gICAgbG9hZFBhcmFsbGVsQ29vcmRpbmF0ZSgpO1xyXG59IiwiZnVuY3Rpb24gZ2V0MkRWZWN0b3JzKHZlY3RvcnMsIHN1Y2Nlc3NDYWxsYmFjayl7XHJcbiAgICB2YXIgcmVxdWVzdCA9ICQuYWpheCh7XHJcbiAgICAgICAgdXJsOiBcIi9nZXQyRFZlY3RvcnNcIixcclxuICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxyXG4gICAgICAgIGRhdGE6IHZlY3RvcnNcclxuICAgICAgfSk7XHJcbiAgICAgICBcclxuICAgICAgcmVxdWVzdC5kb25lKGZ1bmN0aW9uKCByZXNwb25zZSApIHtcclxuICAgICAgICBzdWNjZXNzQ2FsbGJhY2socmVzcG9uc2UpO1xyXG4gICAgICB9KTtcclxuICAgICAgIFxyXG4gICAgICByZXF1ZXN0LmZhaWwoZnVuY3Rpb24oIGpxWEhSLCB0ZXh0U3RhdHVzICkge1xyXG4gICAgICAgIGFsZXJ0KCBcIlJlcXVlc3QgZmFpbGVkOiBcIiArIHRleHRTdGF0dXMgKTtcclxuICAgICAgfSk7XHJcbn1cclxuXHJcbiIsImZ1bmN0aW9uIGxvYWRQYXJhbGxlbENvb3JkaW5hdGUoKXtcclxuICAgIHZhciBtYXJnaW4gPSB7dG9wOiAzMCwgcmlnaHQ6IDEwLCBib3R0b206IDEwLCBsZWZ0OiAxMH0sXHJcbiAgICAgICAgd2lkdGggPSA5NjAgLSBtYXJnaW4ubGVmdCAtIG1hcmdpbi5yaWdodCxcclxuICAgICAgICBoZWlnaHQgPSA1MDAgLSBtYXJnaW4udG9wIC0gbWFyZ2luLmJvdHRvbTtcclxuXHJcbiAgICB2YXIgeCA9IGQzLnNjYWxlLm9yZGluYWwoKS5yYW5nZVBvaW50cyhbMCwgd2lkdGhdLCAxKSxcclxuICAgICAgICB5ID0ge30sXHJcbiAgICAgICAgZHJhZ2dpbmcgPSB7fTtcclxuXHJcbiAgICB2YXIgbGluZSA9IGQzLnN2Zy5saW5lKCksXHJcbiAgICAgICAgYXhpcyA9IGQzLnN2Zy5heGlzKCkub3JpZW50KFwibGVmdFwiKSxcclxuICAgICAgICBiYWNrZ3JvdW5kLFxyXG4gICAgICAgIGZvcmVncm91bmQ7XHJcblxyXG4gICAgdmFyIHN2ZyA9IGQzLnNlbGVjdChcImJvZHlcIikuYXBwZW5kKFwic3ZnXCIpXHJcbiAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCB3aWR0aCArIG1hcmdpbi5sZWZ0ICsgbWFyZ2luLnJpZ2h0KVxyXG4gICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGhlaWdodCArIG1hcmdpbi50b3AgKyBtYXJnaW4uYm90dG9tKVxyXG4gICAgLmFwcGVuZChcImdcIilcclxuICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZShcIiArIG1hcmdpbi5sZWZ0ICsgXCIsXCIgKyBtYXJnaW4udG9wICsgXCIpXCIpO1xyXG5cclxuICAgIGQzLmNzdihcImNhcnMuY3N2XCIsIGZ1bmN0aW9uKGVycm9yLCBjYXJzKSB7XHJcblxyXG4gICAgLy8gRXh0cmFjdCB0aGUgbGlzdCBvZiBkaW1lbnNpb25zIGFuZCBjcmVhdGUgYSBzY2FsZSBmb3IgZWFjaC5cclxuICAgIHguZG9tYWluKGRpbWVuc2lvbnMgPSBkMy5rZXlzKGNhcnNbMF0pLmZpbHRlcihmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgcmV0dXJuIGQgIT0gXCJuYW1lXCIgJiYgKHlbZF0gPSBkMy5zY2FsZS5saW5lYXIoKVxyXG4gICAgICAgICAgICAuZG9tYWluKGQzLmV4dGVudChjYXJzLCBmdW5jdGlvbihwKSB7IHJldHVybiArcFtkXTsgfSkpXHJcbiAgICAgICAgICAgIC5yYW5nZShbaGVpZ2h0LCAwXSkpO1xyXG4gICAgfSkpO1xyXG5cclxuICAgIC8vIEFkZCBncmV5IGJhY2tncm91bmQgbGluZXMgZm9yIGNvbnRleHQuXHJcbiAgICBiYWNrZ3JvdW5kID0gc3ZnLmFwcGVuZChcImdcIilcclxuICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwiYmFja2dyb3VuZFwiKVxyXG4gICAgICAgIC5zZWxlY3RBbGwoXCJwYXRoXCIpXHJcbiAgICAgICAgLmRhdGEoY2FycylcclxuICAgICAgICAuZW50ZXIoKS5hcHBlbmQoXCJwYXRoXCIpXHJcbiAgICAgICAgLmF0dHIoXCJkXCIsIHBhdGgpO1xyXG5cclxuICAgIC8vIEFkZCBibHVlIGZvcmVncm91bmQgbGluZXMgZm9yIGZvY3VzLlxyXG4gICAgZm9yZWdyb3VuZCA9IHN2Zy5hcHBlbmQoXCJnXCIpXHJcbiAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImZvcmVncm91bmRcIilcclxuICAgICAgICAuc2VsZWN0QWxsKFwicGF0aFwiKVxyXG4gICAgICAgIC5kYXRhKGNhcnMpXHJcbiAgICAgICAgLmVudGVyKCkuYXBwZW5kKFwicGF0aFwiKVxyXG4gICAgICAgIC5hdHRyKFwiZFwiLCBwYXRoKTtcclxuXHJcbiAgICAvLyBBZGQgYSBncm91cCBlbGVtZW50IGZvciBlYWNoIGRpbWVuc2lvbi5cclxuICAgIHZhciBnID0gc3ZnLnNlbGVjdEFsbChcIi5kaW1lbnNpb25cIilcclxuICAgICAgICAuZGF0YShkaW1lbnNpb25zKVxyXG4gICAgICAgIC5lbnRlcigpLmFwcGVuZChcImdcIilcclxuICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwiZGltZW5zaW9uXCIpXHJcbiAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gXCJ0cmFuc2xhdGUoXCIgKyB4KGQpICsgXCIpXCI7IH0pXHJcbiAgICAgICAgLmNhbGwoZDMuYmVoYXZpb3IuZHJhZygpXHJcbiAgICAgICAgICAgIC5vcmlnaW4oZnVuY3Rpb24oZCkgeyByZXR1cm4ge3g6IHgoZCl9OyB9KVxyXG4gICAgICAgICAgICAub24oXCJkcmFnc3RhcnRcIiwgZnVuY3Rpb24oZCkge1xyXG4gICAgICAgICAgICBkcmFnZ2luZ1tkXSA9IHgoZCk7XHJcbiAgICAgICAgICAgIGJhY2tncm91bmQuYXR0cihcInZpc2liaWxpdHlcIiwgXCJoaWRkZW5cIik7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5vbihcImRyYWdcIiwgZnVuY3Rpb24oZCkge1xyXG4gICAgICAgICAgICBkcmFnZ2luZ1tkXSA9IE1hdGgubWluKHdpZHRoLCBNYXRoLm1heCgwLCBkMy5ldmVudC54KSk7XHJcbiAgICAgICAgICAgIGZvcmVncm91bmQuYXR0cihcImRcIiwgcGF0aCk7XHJcbiAgICAgICAgICAgIGRpbWVuc2lvbnMuc29ydChmdW5jdGlvbihhLCBiKSB7IHJldHVybiBwb3NpdGlvbihhKSAtIHBvc2l0aW9uKGIpOyB9KTtcclxuICAgICAgICAgICAgeC5kb21haW4oZGltZW5zaW9ucyk7XHJcbiAgICAgICAgICAgIGcuYXR0cihcInRyYW5zZm9ybVwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBcInRyYW5zbGF0ZShcIiArIHBvc2l0aW9uKGQpICsgXCIpXCI7IH0pXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5vbihcImRyYWdlbmRcIiwgZnVuY3Rpb24oZCkge1xyXG4gICAgICAgICAgICBkZWxldGUgZHJhZ2dpbmdbZF07XHJcbiAgICAgICAgICAgIHRyYW5zaXRpb24oZDMuc2VsZWN0KHRoaXMpKS5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKFwiICsgeChkKSArIFwiKVwiKTtcclxuICAgICAgICAgICAgdHJhbnNpdGlvbihmb3JlZ3JvdW5kKS5hdHRyKFwiZFwiLCBwYXRoKTtcclxuICAgICAgICAgICAgYmFja2dyb3VuZFxyXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJkXCIsIHBhdGgpXHJcbiAgICAgICAgICAgICAgICAudHJhbnNpdGlvbigpXHJcbiAgICAgICAgICAgICAgICAuZGVsYXkoNTAwKVxyXG4gICAgICAgICAgICAgICAgLmR1cmF0aW9uKDApXHJcbiAgICAgICAgICAgICAgICAuYXR0cihcInZpc2liaWxpdHlcIiwgbnVsbCk7XHJcbiAgICAgICAgICAgIH0pKTtcclxuXHJcbiAgICAvLyBBZGQgYW4gYXhpcyBhbmQgdGl0bGUuXHJcbiAgICBnLmFwcGVuZChcImdcIilcclxuICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwiYXhpc1wiKVxyXG4gICAgICAgIC5lYWNoKGZ1bmN0aW9uKGQpIHsgZDMuc2VsZWN0KHRoaXMpLmNhbGwoYXhpcy5zY2FsZSh5W2RdKSk7IH0pXHJcbiAgICAgICAgLmFwcGVuZChcInRleHRcIilcclxuICAgICAgICAuc3R5bGUoXCJ0ZXh0LWFuY2hvclwiLCBcIm1pZGRsZVwiKVxyXG4gICAgICAgIC5hdHRyKFwieVwiLCAtOSlcclxuICAgICAgICAudGV4dChmdW5jdGlvbihkKSB7IHJldHVybiBkOyB9KTtcclxuXHJcbiAgICAvLyBBZGQgYW5kIHN0b3JlIGEgYnJ1c2ggZm9yIGVhY2ggYXhpcy5cclxuICAgIGcuYXBwZW5kKFwiZ1wiKVxyXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJicnVzaFwiKVxyXG4gICAgICAgIC5lYWNoKGZ1bmN0aW9uKGQpIHtcclxuICAgICAgICAgICAgZDMuc2VsZWN0KHRoaXMpLmNhbGwoeVtkXS5icnVzaCA9IGQzLnN2Zy5icnVzaCgpLnkoeVtkXSkub24oXCJicnVzaHN0YXJ0XCIsIGJydXNoc3RhcnQpLm9uKFwiYnJ1c2hcIiwgYnJ1c2gpKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5zZWxlY3RBbGwoXCJyZWN0XCIpXHJcbiAgICAgICAgLmF0dHIoXCJ4XCIsIC04KVxyXG4gICAgICAgIC5hdHRyKFwid2lkdGhcIiwgMTYpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgZnVuY3Rpb24gcG9zaXRpb24oZCkge1xyXG4gICAgdmFyIHYgPSBkcmFnZ2luZ1tkXTtcclxuICAgIHJldHVybiB2ID09IG51bGwgPyB4KGQpIDogdjtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiB0cmFuc2l0aW9uKGcpIHtcclxuICAgIHJldHVybiBnLnRyYW5zaXRpb24oKS5kdXJhdGlvbig1MDApO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFJldHVybnMgdGhlIHBhdGggZm9yIGEgZ2l2ZW4gZGF0YSBwb2ludC5cclxuICAgIGZ1bmN0aW9uIHBhdGgoZCkge1xyXG4gICAgcmV0dXJuIGxpbmUoZGltZW5zaW9ucy5tYXAoZnVuY3Rpb24ocCkgeyByZXR1cm4gW3Bvc2l0aW9uKHApLCB5W3BdKGRbcF0pXTsgfSkpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGJydXNoc3RhcnQoKSB7XHJcbiAgICBkMy5ldmVudC5zb3VyY2VFdmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBIYW5kbGVzIGEgYnJ1c2ggZXZlbnQsIHRvZ2dsaW5nIHRoZSBkaXNwbGF5IG9mIGZvcmVncm91bmQgbGluZXMuXHJcbiAgICBmdW5jdGlvbiBicnVzaCgpIHtcclxuICAgIHZhciBhY3RpdmVzID0gZGltZW5zaW9ucy5maWx0ZXIoZnVuY3Rpb24ocCkgeyByZXR1cm4gIXlbcF0uYnJ1c2guZW1wdHkoKTsgfSksXHJcbiAgICAgICAgZXh0ZW50cyA9IGFjdGl2ZXMubWFwKGZ1bmN0aW9uKHApIHsgcmV0dXJuIHlbcF0uYnJ1c2guZXh0ZW50KCk7IH0pO1xyXG4gICAgZm9yZWdyb3VuZC5zdHlsZShcImRpc3BsYXlcIiwgZnVuY3Rpb24oZCkge1xyXG4gICAgICAgIHJldHVybiBhY3RpdmVzLmV2ZXJ5KGZ1bmN0aW9uKHAsIGkpIHtcclxuICAgICAgICByZXR1cm4gZXh0ZW50c1tpXVswXSA8PSBkW3BdICYmIGRbcF0gPD0gZXh0ZW50c1tpXVsxXTtcclxuICAgICAgICB9KSA/IG51bGwgOiBcIm5vbmVcIjtcclxuICAgIH0pO1xyXG4gICAgfVxyXG5cclxufSIsImZ1bmN0aW9uIGdlbmVyYXRlVG9waWNWZWN0b3JzKCl7XHJcbiAgICB3aW5kb3cudG9waWNWZWN0b3JzID0ge307XHJcbiAgICBpZih3aW5kb3cudG9waWNfd29yZF9wcm9iYWJpbGl0eV9pbl90b3BpYyl7XHJcbiAgICAgICAgZm9yKHZhciB4IGluIHdpbmRvdy50b3BpY193b3JkX3Byb2JhYmlsaXR5X2luX3RvcGljKXtcclxuICAgICAgICAgICAgdmFyIHZlY3RvciA9IFtdO1xyXG4gICAgICAgICAgICBmb3IodmFyIHkgaW4gd2luZG93LnRvcGljX3dvcmRfcHJvYmFiaWxpdHlfaW5fdG9waWNbeF0pe1xyXG4gICAgICAgICAgICAgICAgdmVjdG9yLnB1c2god2luZG93LnRvcGljX3dvcmRfcHJvYmFiaWxpdHlfaW5fdG9waWNbeF1beV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHdpbmRvdy50b3BpY1ZlY3RvcnNbeF0gPSB2ZWN0b3I7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBnZW5lcmF0ZVBhcmFsbGVsQ29vcmRpbmF0ZURhdGEoKXtcclxuICAgIHZhciB3b3JkcyA9IHdpbmRvdy50b3BpY193b3JkX3Byb2JhYmlsaXR5X2luX3RvcGljO1xyXG59XHJcblxyXG4iLCJ3aW5kb3cudnVlQXBwID0gbmV3IFZ1ZSh7XHJcbiAgICBlbDogJyN2dWUtYXBwJyxcclxuICAgIGRhdGE6IHtcclxuICAgICAgICBtZXNzYWdlOiAnSGVsbG8gdXNlciEnLFxyXG4gICAgICAgIG5vbmVTZWxlY3RlZDogdHJ1ZSxcclxuICAgICAgICBzZWxlY3RlZFBhZ2U6IDEsXHJcbiAgICAgICAgcGxheWVyRGV0YWlsOiB7XHJcbiAgICAgICAgICAgIG5hbWU6IFwiPFBsYXllciBOYW1lPlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICBvdmVydmlld0ZpbHRlcnM6IHt9LFxyXG4gICAgICAgIHNlbGVjdGVkTWFwOiAxXHJcbiAgICB9LFxyXG4gICAgbWV0aG9kczoge1xyXG4gICAgICAgIHNlbGVjdFBhZ2U6IGZ1bmN0aW9uKHgpe1xyXG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkUGFnZSA9IHg7XHJcbiAgICAgICAgICAgIGlmICh4ID09IDEpe1xyXG4gICAgICAgICAgICAgICAgaW5pdFBhZ2UxKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHggPT0gMil7XHJcbiAgICAgICAgICAgICAgICBpbml0UGFnZTIoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoeCA9PSAzKXtcclxuICAgICAgICAgICAgICAgIGluaXRQYWdlMygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIG1vdW50ZWQ6IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJNb3VudGVkXCIpO1xyXG4gICAgICAgIGxvYWREMygpO1xyXG4gICAgICAgIGxvYWRKcXVlcnkoKTtcclxuICAgIH1cclxufSk7Il19
