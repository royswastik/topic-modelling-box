"use strict";

function loadJquery() {
  $(document).ready(function () {
    $("#toggle-sidebar").click(function () {
      $('.ui.sidebar').sidebar('toggle');
    });
  });
}
"use strict";

function loadD3() {
  console.log("hello");
  d3.csv("data/document_topic_probability.json", function (x) {
    window.document_topic_probability = x;
    d3.csv("data/document_topic_probability.json", function (y) {
      window.topic_word_distribution_in_corpora = y;
      d3.csv("data/document_topic_probability.json", function (z) {
        window.topic_word_probability_in_topic = z;
        generateTopicVectors(); //Loads vectors in window.topicVectors

        loadVisualizations();
      });
    });
  });
}

function loadVisualizations() {}

function initPage1() {}

function initPage2() {}

function initPage3() {}
"use strict";

function generateTopicVectors() {
  window.topicVectors = [];

  if (window.topic_word_probability_in_topic) {
    for (var x in window.topic_word_probability_in_topic) {
      var vector = [];

      for (var y in window.topic_word_probability_in_topic[x]) {
        vector.push(window.topic_word_probability_in_topic[x][y]);
      }

      window.topicVectors.push(vector);
    }
  }
}
"use strict";

window.vueApp = new Vue({
  el: '#vue-app',
  data: {
    message: 'Hello user!',
    noneSelected: true,
    selectedPage: 1,
    playerDetail: {
      name: "<Player Name>"
    },
    overviewFilters: {},
    selectedMap: 1
  },
  methods: {
    selectPage: function selectPage(x) {
      this.selectedPage = x;

      if (x == 1) {
        initPage1();
      }

      if (x == 2) {
        initPage2();
      }

      if (x == 3) {
        initPage3();
      }
    }
  },
  mounted: function mounted() {
    console.log("Mounted");
    loadD3();
    loadJquery();
  }
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImV2ZW50cy5qcyIsIm1haW4uanMiLCJ1dGlsLmpzIiwidnVlX21vZGVsLmpzIl0sIm5hbWVzIjpbImxvYWRKcXVlcnkiLCIkIiwiZG9jdW1lbnQiLCJyZWFkeSIsImNsaWNrIiwic2lkZWJhciIsImxvYWREMyIsImNvbnNvbGUiLCJsb2ciLCJkMyIsImNzdiIsIngiLCJ3aW5kb3ciLCJkb2N1bWVudF90b3BpY19wcm9iYWJpbGl0eSIsInkiLCJ0b3BpY193b3JkX2Rpc3RyaWJ1dGlvbl9pbl9jb3Jwb3JhIiwieiIsInRvcGljX3dvcmRfcHJvYmFiaWxpdHlfaW5fdG9waWMiLCJnZW5lcmF0ZVRvcGljVmVjdG9ycyIsImxvYWRWaXN1YWxpemF0aW9ucyIsImluaXRQYWdlMSIsImluaXRQYWdlMiIsImluaXRQYWdlMyIsInRvcGljVmVjdG9ycyIsInZlY3RvciIsInB1c2giLCJ2dWVBcHAiLCJWdWUiLCJlbCIsImRhdGEiLCJtZXNzYWdlIiwibm9uZVNlbGVjdGVkIiwic2VsZWN0ZWRQYWdlIiwicGxheWVyRGV0YWlsIiwibmFtZSIsIm92ZXJ2aWV3RmlsdGVycyIsInNlbGVjdGVkTWFwIiwibWV0aG9kcyIsInNlbGVjdFBhZ2UiLCJtb3VudGVkIl0sIm1hcHBpbmdzIjoiOztBQUFBLFNBQVNBLFVBQVQsR0FBcUI7QUFDakJDLEVBQUFBLENBQUMsQ0FBQ0MsUUFBRCxDQUFELENBQVlDLEtBQVosQ0FBa0IsWUFBVTtBQUN4QkYsSUFBQUEsQ0FBQyxDQUFDLGlCQUFELENBQUQsQ0FBcUJHLEtBQXJCLENBQTJCLFlBQVU7QUFDakNILE1BQUFBLENBQUMsQ0FBQyxhQUFELENBQUQsQ0FDS0ksT0FETCxDQUNhLFFBRGI7QUFHSCxLQUpEO0FBTUgsR0FQRDtBQVFIOzs7QUNURCxTQUFTQyxNQUFULEdBQWlCO0FBQ2JDLEVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLE9BQVo7QUFDQUMsRUFBQUEsRUFBRSxDQUFDQyxHQUFILENBQU8sc0NBQVAsRUFBK0MsVUFBU0MsQ0FBVCxFQUFXO0FBQ3REQyxJQUFBQSxNQUFNLENBQUNDLDBCQUFQLEdBQW1DRixDQUFuQztBQUNBRixJQUFBQSxFQUFFLENBQUNDLEdBQUgsQ0FBTyxzQ0FBUCxFQUErQyxVQUFTSSxDQUFULEVBQVc7QUFDdERGLE1BQUFBLE1BQU0sQ0FBQ0csa0NBQVAsR0FBMkNELENBQTNDO0FBQ0FMLE1BQUFBLEVBQUUsQ0FBQ0MsR0FBSCxDQUFPLHNDQUFQLEVBQStDLFVBQVNNLENBQVQsRUFBVztBQUN0REosUUFBQUEsTUFBTSxDQUFDSywrQkFBUCxHQUF5Q0QsQ0FBekM7QUFDQUUsUUFBQUEsb0JBQW9CLEdBRmtDLENBRTlCOztBQUN4QkMsUUFBQUEsa0JBQWtCO0FBQ3JCLE9BSkQ7QUFLSCxLQVBEO0FBUUgsR0FWRDtBQVdIOztBQUVELFNBQVNBLGtCQUFULEdBQTZCLENBRTVCOztBQUVELFNBQVNDLFNBQVQsR0FBb0IsQ0FFbkI7O0FBRUQsU0FBU0MsU0FBVCxHQUFvQixDQUVuQjs7QUFFRCxTQUFTQyxTQUFULEdBQW9CLENBRW5COzs7QUM3QkQsU0FBU0osb0JBQVQsR0FBK0I7QUFDM0JOLEVBQUFBLE1BQU0sQ0FBQ1csWUFBUCxHQUFzQixFQUF0Qjs7QUFDQSxNQUFHWCxNQUFNLENBQUNLLCtCQUFWLEVBQTBDO0FBQ3RDLFNBQUksSUFBSU4sQ0FBUixJQUFhQyxNQUFNLENBQUNLLCtCQUFwQixFQUFvRDtBQUNoRCxVQUFJTyxNQUFNLEdBQUcsRUFBYjs7QUFDQSxXQUFJLElBQUlWLENBQVIsSUFBYUYsTUFBTSxDQUFDSywrQkFBUCxDQUF1Q04sQ0FBdkMsQ0FBYixFQUF1RDtBQUNuRGEsUUFBQUEsTUFBTSxDQUFDQyxJQUFQLENBQVliLE1BQU0sQ0FBQ0ssK0JBQVAsQ0FBdUNOLENBQXZDLEVBQTBDRyxDQUExQyxDQUFaO0FBQ0g7O0FBQ0RGLE1BQUFBLE1BQU0sQ0FBQ1csWUFBUCxDQUFvQkUsSUFBcEIsQ0FBeUJELE1BQXpCO0FBQ0g7QUFDSjtBQUNKOzs7QUNYRFosTUFBTSxDQUFDYyxNQUFQLEdBQWdCLElBQUlDLEdBQUosQ0FBUTtBQUNwQkMsRUFBQUEsRUFBRSxFQUFFLFVBRGdCO0FBRXBCQyxFQUFBQSxJQUFJLEVBQUU7QUFDRkMsSUFBQUEsT0FBTyxFQUFFLGFBRFA7QUFFRkMsSUFBQUEsWUFBWSxFQUFFLElBRlo7QUFHRkMsSUFBQUEsWUFBWSxFQUFFLENBSFo7QUFJRkMsSUFBQUEsWUFBWSxFQUFFO0FBQ1ZDLE1BQUFBLElBQUksRUFBRTtBQURJLEtBSlo7QUFPRkMsSUFBQUEsZUFBZSxFQUFFLEVBUGY7QUFRRkMsSUFBQUEsV0FBVyxFQUFFO0FBUlgsR0FGYztBQVlwQkMsRUFBQUEsT0FBTyxFQUFFO0FBQ0xDLElBQUFBLFVBQVUsRUFBRSxvQkFBUzNCLENBQVQsRUFBVztBQUNuQixXQUFLcUIsWUFBTCxHQUFvQnJCLENBQXBCOztBQUNBLFVBQUlBLENBQUMsSUFBSSxDQUFULEVBQVc7QUFDUFMsUUFBQUEsU0FBUztBQUNaOztBQUNELFVBQUlULENBQUMsSUFBSSxDQUFULEVBQVc7QUFDUFUsUUFBQUEsU0FBUztBQUNaOztBQUNELFVBQUlWLENBQUMsSUFBSSxDQUFULEVBQVc7QUFDUFcsUUFBQUEsU0FBUztBQUNaO0FBQ0o7QUFaSSxHQVpXO0FBMEJwQmlCLEVBQUFBLE9BQU8sRUFBRSxtQkFBVTtBQUNmaEMsSUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksU0FBWjtBQUNBRixJQUFBQSxNQUFNO0FBQ05OLElBQUFBLFVBQVU7QUFDYjtBQTlCbUIsQ0FBUixDQUFoQiIsImZpbGUiOiJhcHAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBsb2FkSnF1ZXJ5KCl7XHJcbiAgICAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpe1xyXG4gICAgICAgICQoXCIjdG9nZ2xlLXNpZGViYXJcIikuY2xpY2soZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgJCgnLnVpLnNpZGViYXInKVxyXG4gICAgICAgICAgICAgICAgLnNpZGViYXIoJ3RvZ2dsZScpXHJcbiAgICAgICAgICAgIDtcclxuICAgICAgICB9KTtcclxuICAgICAgICBcclxuICAgIH0pO1xyXG59XHJcbiIsImZ1bmN0aW9uIGxvYWREMygpe1xyXG4gICAgY29uc29sZS5sb2coXCJoZWxsb1wiKTtcclxuICAgIGQzLmNzdihcImRhdGEvZG9jdW1lbnRfdG9waWNfcHJvYmFiaWxpdHkuanNvblwiLCBmdW5jdGlvbih4KXtcclxuICAgICAgICB3aW5kb3cuZG9jdW1lbnRfdG9waWNfcHJvYmFiaWxpdHk9IHg7XHJcbiAgICAgICAgZDMuY3N2KFwiZGF0YS9kb2N1bWVudF90b3BpY19wcm9iYWJpbGl0eS5qc29uXCIsIGZ1bmN0aW9uKHkpe1xyXG4gICAgICAgICAgICB3aW5kb3cudG9waWNfd29yZF9kaXN0cmlidXRpb25faW5fY29ycG9yYT0geTtcclxuICAgICAgICAgICAgZDMuY3N2KFwiZGF0YS9kb2N1bWVudF90b3BpY19wcm9iYWJpbGl0eS5qc29uXCIsIGZ1bmN0aW9uKHope1xyXG4gICAgICAgICAgICAgICAgd2luZG93LnRvcGljX3dvcmRfcHJvYmFiaWxpdHlfaW5fdG9waWMgPSB6O1xyXG4gICAgICAgICAgICAgICAgZ2VuZXJhdGVUb3BpY1ZlY3RvcnMoKTsgLy9Mb2FkcyB2ZWN0b3JzIGluIHdpbmRvdy50b3BpY1ZlY3RvcnNcclxuICAgICAgICAgICAgICAgIGxvYWRWaXN1YWxpemF0aW9ucygpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBsb2FkVmlzdWFsaXphdGlvbnMoKXtcclxuXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGluaXRQYWdlMSgpe1xyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gaW5pdFBhZ2UyKCl7XHJcblxyXG59XHJcblxyXG5mdW5jdGlvbiBpbml0UGFnZTMoKXtcclxuXHJcbn0iLCJmdW5jdGlvbiBnZW5lcmF0ZVRvcGljVmVjdG9ycygpe1xyXG4gICAgd2luZG93LnRvcGljVmVjdG9ycyA9IFtdXHJcbiAgICBpZih3aW5kb3cudG9waWNfd29yZF9wcm9iYWJpbGl0eV9pbl90b3BpYyl7XHJcbiAgICAgICAgZm9yKHZhciB4IGluIHdpbmRvdy50b3BpY193b3JkX3Byb2JhYmlsaXR5X2luX3RvcGljKXtcclxuICAgICAgICAgICAgdmFyIHZlY3RvciA9IFtdO1xyXG4gICAgICAgICAgICBmb3IodmFyIHkgaW4gd2luZG93LnRvcGljX3dvcmRfcHJvYmFiaWxpdHlfaW5fdG9waWNbeF0pe1xyXG4gICAgICAgICAgICAgICAgdmVjdG9yLnB1c2god2luZG93LnRvcGljX3dvcmRfcHJvYmFiaWxpdHlfaW5fdG9waWNbeF1beV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHdpbmRvdy50b3BpY1ZlY3RvcnMucHVzaCh2ZWN0b3IpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsIndpbmRvdy52dWVBcHAgPSBuZXcgVnVlKHtcclxuICAgIGVsOiAnI3Z1ZS1hcHAnLFxyXG4gICAgZGF0YToge1xyXG4gICAgICAgIG1lc3NhZ2U6ICdIZWxsbyB1c2VyIScsXHJcbiAgICAgICAgbm9uZVNlbGVjdGVkOiB0cnVlLFxyXG4gICAgICAgIHNlbGVjdGVkUGFnZTogMSxcclxuICAgICAgICBwbGF5ZXJEZXRhaWw6IHtcclxuICAgICAgICAgICAgbmFtZTogXCI8UGxheWVyIE5hbWU+XCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIG92ZXJ2aWV3RmlsdGVyczoge30sXHJcbiAgICAgICAgc2VsZWN0ZWRNYXA6IDFcclxuICAgIH0sXHJcbiAgICBtZXRob2RzOiB7XHJcbiAgICAgICAgc2VsZWN0UGFnZTogZnVuY3Rpb24oeCl7XHJcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRQYWdlID0geDtcclxuICAgICAgICAgICAgaWYgKHggPT0gMSl7XHJcbiAgICAgICAgICAgICAgICBpbml0UGFnZTEoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoeCA9PSAyKXtcclxuICAgICAgICAgICAgICAgIGluaXRQYWdlMigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh4ID09IDMpe1xyXG4gICAgICAgICAgICAgICAgaW5pdFBhZ2UzKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgbW91bnRlZDogZnVuY3Rpb24oKXtcclxuICAgICAgICBjb25zb2xlLmxvZyhcIk1vdW50ZWRcIik7XHJcbiAgICAgICAgbG9hZEQzKCk7XHJcbiAgICAgICAgbG9hZEpxdWVyeSgpO1xyXG4gICAgfVxyXG59KTsiXX0=
